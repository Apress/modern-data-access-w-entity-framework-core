//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 30/12/2017 23:45:03
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace EFC_EntityDeveloper
{

 public partial class WWWingsV1Model : DbContext
 {

  public WWWingsV1Model() :
      base()
  {
   OnCreated();
  }

  public WWWingsV1Model(DbContextOptions<WWWingsV1Model> options) :
      base(options)
  {
   OnCreated();
  }

  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
  {
   if (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null))
    optionsBuilder.UseSqlServer(GetConnectionString("WWWingsV1ModelConnectionString"));
   CustomizeConfiguration(ref optionsBuilder);
   base.OnConfiguring(optionsBuilder);
  }

  private static string GetConnectionString(string connectionStringName)
  {
   System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
   if (connectionStringSettings == null)
    throw new InvalidOperationException("Connection string \"" + connectionStringName + "\" could not be found in the configuration file.");
   return connectionStringSettings.ConnectionString;
  }

  partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

  public virtual DbSet<Flight> Flight
  {
   get;
   set;
  }

  public virtual DbSet<FlightPassenger> FlightPassenger
  {
   get;
   set;
  }

  public virtual DbSet<AllBookings> AllBookings
  {
   get;
   set;
  }

  public virtual DbSet<AllEmployees> AllEmployees
  {
   get;
   set;
  }

  public virtual DbSet<AllPassengers> AllPassengers
  {
   get;
   set;
  }

  public virtual DbSet<FlightsFromRome> FlightsFromRome
  {
   get;
   set;
  }

  public virtual DbSet<Employee> Employee
  {
   get;
   set;
  }

  public virtual DbSet<Passenger> Passenger
  {
   get;
   set;
  }

  public virtual DbSet<Person> Person
  {
   get;
   set;
  }

  public virtual DbSet<Pilot> Pilot
  {
   get;
   set;
  }

  public virtual DbSet<Airport> Airport
  {
   get;
   set;
  }

  #region Methods

  public void ADMINSkinkLog()
  {


   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.StoredProcedure;
     cmd.CommandText = @"Admin.ADMIN_SkinkLog";

     cmd.ExecuteNonQuery();
    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
  }

  public List<CountFlightByDepartureResult> CountFlightByDeparture(string Ort)
  {

   List<CountFlightByDepartureResult> result = new List<CountFlightByDepartureResult>();

   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.StoredProcedure;
     cmd.CommandText = @"Operation.CountFlightByDeparture";

     DbParameter OrtParameter = cmd.CreateParameter();
     OrtParameter.ParameterName = "Ort";
     OrtParameter.Direction = ParameterDirection.Input;
     if (Ort != null)
     {
      OrtParameter.Value = Ort;
     }
     else
     {
      OrtParameter.DbType = DbType.String;
      OrtParameter.Size = -1;
      OrtParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(OrtParameter);

     using (IDataReader reader = cmd.ExecuteReader())
     {
      while (reader.Read())
      {
       CountFlightByDepartureResult row = new CountFlightByDepartureResult();
       if (!reader.IsDBNull(reader.GetOrdinal("Expr1")))
        row.Expr1 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Expr1")), typeof(int));
       else
        row.Expr1 = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Departure")))
        row.Departure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Departure")), typeof(string));

       result.Add(row);
      }
     }
    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
   return result;
  }

  public void DeleteFlight(System.Nullable<int> Original_FlightNo, string Original_Departure, string Original_Destination, System.Nullable<System.DateTime> Original_FlightDate, System.Nullable<bool> Original_NonSmokingFlight, System.Nullable<short> Original_Seats, System.Nullable<int> IsNull_FreeSeats, System.Nullable<short> Original_FreeSeats, System.Nullable<int> IsNull_Pilot_PersonID, System.Nullable<int> Original_Pilot_PersonID, System.Nullable<int> IsNull_Airline, System.Nullable<System.DateTime> Original_Airline)
  {


   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.StoredProcedure;
     cmd.CommandText = @"Operation.DeleteFlight";

     DbParameter Original_FlightNoParameter = cmd.CreateParameter();
     Original_FlightNoParameter.ParameterName = "Original_FlightNo";
     Original_FlightNoParameter.Direction = ParameterDirection.Input;
     if (Original_FlightNo.HasValue)
     {
      Original_FlightNoParameter.Value = Original_FlightNo.Value;
     }
     else
     {
      Original_FlightNoParameter.DbType = DbType.Int32;
      Original_FlightNoParameter.Size = -1;
      Original_FlightNoParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_FlightNoParameter);

     DbParameter Original_DepartureParameter = cmd.CreateParameter();
     Original_DepartureParameter.ParameterName = "Original_Departure";
     Original_DepartureParameter.Direction = ParameterDirection.Input;
     if (Original_Departure != null)
     {
      Original_DepartureParameter.Value = Original_Departure;
     }
     else
     {
      Original_DepartureParameter.DbType = DbType.String;
      Original_DepartureParameter.Size = -1;
      Original_DepartureParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_DepartureParameter);

     DbParameter Original_DestinationParameter = cmd.CreateParameter();
     Original_DestinationParameter.ParameterName = "Original_Destination";
     Original_DestinationParameter.Direction = ParameterDirection.Input;
     if (Original_Destination != null)
     {
      Original_DestinationParameter.Value = Original_Destination;
     }
     else
     {
      Original_DestinationParameter.DbType = DbType.String;
      Original_DestinationParameter.Size = -1;
      Original_DestinationParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_DestinationParameter);

     DbParameter Original_FlightDateParameter = cmd.CreateParameter();
     Original_FlightDateParameter.ParameterName = "Original_FlightDate";
     Original_FlightDateParameter.Direction = ParameterDirection.Input;
     if (Original_FlightDate.HasValue)
     {
      Original_FlightDateParameter.Value = Original_FlightDate.Value;
     }
     else
     {
      Original_FlightDateParameter.DbType = DbType.DateTime;
      Original_FlightDateParameter.Size = -1;
      Original_FlightDateParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_FlightDateParameter);

     DbParameter Original_NonSmokingFlightParameter = cmd.CreateParameter();
     Original_NonSmokingFlightParameter.ParameterName = "Original_NonSmokingFlight";
     Original_NonSmokingFlightParameter.Direction = ParameterDirection.Input;
     if (Original_NonSmokingFlight.HasValue)
     {
      Original_NonSmokingFlightParameter.Value = Original_NonSmokingFlight.Value;
     }
     else
     {
      Original_NonSmokingFlightParameter.DbType = DbType.Boolean;
      Original_NonSmokingFlightParameter.Size = -1;
      Original_NonSmokingFlightParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_NonSmokingFlightParameter);

     DbParameter Original_SeatsParameter = cmd.CreateParameter();
     Original_SeatsParameter.ParameterName = "Original_Seats";
     Original_SeatsParameter.Direction = ParameterDirection.Input;
     if (Original_Seats.HasValue)
     {
      Original_SeatsParameter.Value = Original_Seats.Value;
     }
     else
     {
      Original_SeatsParameter.DbType = DbType.Int16;
      Original_SeatsParameter.Size = -1;
      Original_SeatsParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_SeatsParameter);

     DbParameter IsNull_FreeSeatsParameter = cmd.CreateParameter();
     IsNull_FreeSeatsParameter.ParameterName = "IsNull_FreeSeats";
     IsNull_FreeSeatsParameter.Direction = ParameterDirection.Input;
     if (IsNull_FreeSeats.HasValue)
     {
      IsNull_FreeSeatsParameter.Value = IsNull_FreeSeats.Value;
     }
     else
     {
      IsNull_FreeSeatsParameter.DbType = DbType.Int32;
      IsNull_FreeSeatsParameter.Size = -1;
      IsNull_FreeSeatsParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(IsNull_FreeSeatsParameter);

     DbParameter Original_FreeSeatsParameter = cmd.CreateParameter();
     Original_FreeSeatsParameter.ParameterName = "Original_FreeSeats";
     Original_FreeSeatsParameter.Direction = ParameterDirection.Input;
     if (Original_FreeSeats.HasValue)
     {
      Original_FreeSeatsParameter.Value = Original_FreeSeats.Value;
     }
     else
     {
      Original_FreeSeatsParameter.DbType = DbType.Int16;
      Original_FreeSeatsParameter.Size = -1;
      Original_FreeSeatsParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_FreeSeatsParameter);

     DbParameter IsNull_Pilot_PersonIDParameter = cmd.CreateParameter();
     IsNull_Pilot_PersonIDParameter.ParameterName = "IsNull_Pilot_PersonID";
     IsNull_Pilot_PersonIDParameter.Direction = ParameterDirection.Input;
     if (IsNull_Pilot_PersonID.HasValue)
     {
      IsNull_Pilot_PersonIDParameter.Value = IsNull_Pilot_PersonID.Value;
     }
     else
     {
      IsNull_Pilot_PersonIDParameter.DbType = DbType.Int32;
      IsNull_Pilot_PersonIDParameter.Size = -1;
      IsNull_Pilot_PersonIDParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(IsNull_Pilot_PersonIDParameter);

     DbParameter Original_Pilot_PersonIDParameter = cmd.CreateParameter();
     Original_Pilot_PersonIDParameter.ParameterName = "Original_Pilot_PersonID";
     Original_Pilot_PersonIDParameter.Direction = ParameterDirection.Input;
     if (Original_Pilot_PersonID.HasValue)
     {
      Original_Pilot_PersonIDParameter.Value = Original_Pilot_PersonID.Value;
     }
     else
     {
      Original_Pilot_PersonIDParameter.DbType = DbType.Int32;
      Original_Pilot_PersonIDParameter.Size = -1;
      Original_Pilot_PersonIDParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_Pilot_PersonIDParameter);

     DbParameter IsNull_AirlineParameter = cmd.CreateParameter();
     IsNull_AirlineParameter.ParameterName = "IsNull_Airline";
     IsNull_AirlineParameter.Direction = ParameterDirection.Input;
     if (IsNull_Airline.HasValue)
     {
      IsNull_AirlineParameter.Value = IsNull_Airline.Value;
     }
     else
     {
      IsNull_AirlineParameter.DbType = DbType.Int32;
      IsNull_AirlineParameter.Size = -1;
      IsNull_AirlineParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(IsNull_AirlineParameter);

     DbParameter Original_AirlineParameter = cmd.CreateParameter();
     Original_AirlineParameter.ParameterName = "Original_Airline";
     Original_AirlineParameter.Direction = ParameterDirection.Input;
     if (Original_Airline.HasValue)
     {
      Original_AirlineParameter.Value = Original_Airline.Value;
     }
     else
     {
      Original_AirlineParameter.DbType = DbType.DateTime;
      Original_AirlineParameter.Size = -1;
      Original_AirlineParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_AirlineParameter);

     cmd.ExecuteNonQuery();
    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
  }

  public List<AllBookings> GetAllBookings()
  {

   List<AllBookings> result = new List<AllBookings>();

   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.StoredProcedure;
     cmd.CommandText = @"Operation.GetAllBookings";

     using (IDataReader reader = cmd.ExecuteReader())
     {
      while (reader.Read())
      {
       AllBookings row = new AllBookings();
       if (!reader.IsDBNull(reader.GetOrdinal("FlightNo")))
        row.FlightNo = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightNo")), typeof(int));

       if (!reader.IsDBNull(reader.GetOrdinal("Departure")))
        row.Departure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Departure")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("Destination")))
        row.Destination = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Destination")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("FlightDate")))
        row.FlightDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightDate")), typeof(System.DateTime));

       if (!reader.IsDBNull(reader.GetOrdinal("PersonID")))
        row.PersonID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"PersonID")), typeof(int));

       result.Add(row);
      }
     }
    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
   return result;
  }

  public List<GetDepartureeResult> GetDeparturee()
  {

   List<GetDepartureeResult> result = new List<GetDepartureeResult>();

   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.StoredProcedure;
     cmd.CommandText = @"Operation.GetDeparturee";

     using (IDataReader reader = cmd.ExecuteReader())
     {
      while (reader.Read())
      {
       GetDepartureeResult row = new GetDepartureeResult();
       if (!reader.IsDBNull(reader.GetOrdinal("Departure")))
        row.Departure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Departure")), typeof(string));

       result.Add(row);
      }
     }
    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
   return result;
  }

  public List<Flight> GetFlight(System.Nullable<int> FlightNo)
  {

   List<Flight> result = new List<Flight>();

   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.StoredProcedure;
     cmd.CommandText = @"Operation.GetFlight";

     DbParameter FlightNoParameter = cmd.CreateParameter();
     FlightNoParameter.ParameterName = "FlightNo";
     FlightNoParameter.Direction = ParameterDirection.Input;
     if (FlightNo.HasValue)
     {
      FlightNoParameter.Value = FlightNo.Value;
     }
     else
     {
      FlightNoParameter.DbType = DbType.Int32;
      FlightNoParameter.Size = -1;
      FlightNoParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(FlightNoParameter);

     using (IDataReader reader = cmd.ExecuteReader())
     {
      while (reader.Read())
      {
       Flight row = new Flight();
       if (!reader.IsDBNull(reader.GetOrdinal("FlightNo")))
        row.FlightNo = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightNo")), typeof(int));

       if (!reader.IsDBNull(reader.GetOrdinal("Timestamp")))
        row.Timestamp = (byte[])Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Timestamp")), typeof(byte[]));
       else
        row.Timestamp = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Airline")))
        row.Airline = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Airline")), typeof(string));
       else
        row.Airline = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Departure")))
        row.Departure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Departure")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("Destination")))
        row.Destination = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Destination")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("FlightDate")))
        row.FlightDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightDate")), typeof(System.DateTime));

       if (!reader.IsDBNull(reader.GetOrdinal("NonSmokingFlight")))
        row.NonSmokingFlight = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NonSmokingFlight")), typeof(bool));

       if (!reader.IsDBNull(reader.GetOrdinal("Seats")))
        row.Seats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Seats")), typeof(short));

       if (!reader.IsDBNull(reader.GetOrdinal("FreeSeats")))
        row.FreeSeats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FreeSeats")), typeof(short));
       else
        row.FreeSeats = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Pilot_PersonID")))
        row.PilotPersonID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pilot_PersonID")), typeof(int));
       else
        row.PilotPersonID = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Memo")))
        row.Memo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Memo")), typeof(string));
       else
        row.Memo = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Strikebound")))
        row.Strikebound = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Strikebound")), typeof(bool));
       else
        row.Strikebound = null;

       if (!reader.IsDBNull(reader.GetOrdinal("`Utilization `")))
        row.Utilization = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"`Utilization `")), typeof(int));
       else
        row.Utilization = null;

       result.Add(row);
      }
     }
    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
   return result;
  }

  public List<GetFlightAnzahlResult> GetFlightAnzahl()
  {

   List<GetFlightAnzahlResult> result = new List<GetFlightAnzahlResult>();

   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.StoredProcedure;
     cmd.CommandText = @"Operation.GetFlightAnzahl";

     using (IDataReader reader = cmd.ExecuteReader())
     {
      while (reader.Read())
      {
       GetFlightAnzahlResult row = new GetFlightAnzahlResult();
       if (!reader.IsDBNull(reader.GetOrdinal("column0")))
        row.column0 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(int));
       else
        row.column0 = null;

       result.Add(row);
      }
     }
    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
   return result;
  }

  public List<Flight> GetFlights()
  {

   List<Flight> result = new List<Flight>();

   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.StoredProcedure;
     cmd.CommandText = @"Operation.GetFlights";

     using (IDataReader reader = cmd.ExecuteReader())
     {
      while (reader.Read())
      {
       Flight row = new Flight();
       if (!reader.IsDBNull(reader.GetOrdinal("FlightNo")))
        row.FlightNo = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightNo")), typeof(int));

       if (!reader.IsDBNull(reader.GetOrdinal("Timestamp")))
        row.Timestamp = (byte[])Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Timestamp")), typeof(byte[]));
       else
        row.Timestamp = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Airline")))
        row.Airline = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Airline")), typeof(string));
       else
        row.Airline = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Departure")))
        row.Departure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Departure")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("Destination")))
        row.Destination = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Destination")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("FlightDate")))
        row.FlightDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightDate")), typeof(System.DateTime));

       if (!reader.IsDBNull(reader.GetOrdinal("NonSmokingFlight")))
        row.NonSmokingFlight = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NonSmokingFlight")), typeof(bool));

       if (!reader.IsDBNull(reader.GetOrdinal("Seats")))
        row.Seats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Seats")), typeof(short));

       if (!reader.IsDBNull(reader.GetOrdinal("FreeSeats")))
        row.FreeSeats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FreeSeats")), typeof(short));
       else
        row.FreeSeats = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Pilot_PersonID")))
        row.PilotPersonID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pilot_PersonID")), typeof(int));
       else
        row.PilotPersonID = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Memo")))
        row.Memo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Memo")), typeof(string));
       else
        row.Memo = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Strikebound")))
        row.Strikebound = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Strikebound")), typeof(bool));
       else
        row.Strikebound = null;

       if (!reader.IsDBNull(reader.GetOrdinal("`Utilization `")))
        row.Utilization = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"`Utilization `")), typeof(int));
       else
        row.Utilization = null;

       result.Add(row);
      }
     }
    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
   return result;
  }

  public GetFlightsAndTotalCountMultipleResult GetFlightsAndTotalCount()
  {

   GetFlightsAndTotalCountMultipleResult result = new GetFlightsAndTotalCountMultipleResult();

   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.StoredProcedure;
     cmd.CommandText = @"Operation.GetFlightsAndTotalCount";
     using (IDataReader reader = cmd.ExecuteReader())
     {
      while (reader.Read())
      {

       Flight resultRow = new Flight();
       if (!reader.IsDBNull(reader.GetOrdinal("FlightNo")))
        resultRow.FlightNo = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("FlightNo")), typeof(int));
       if (!reader.IsDBNull(reader.GetOrdinal("Timestamp")))
        resultRow.Timestamp = (byte[])Convert.ChangeType(reader.GetValue(reader.GetOrdinal("Timestamp")), typeof(byte[]));
       else
        resultRow.Timestamp = null;
       if (!reader.IsDBNull(reader.GetOrdinal("Airline")))
        resultRow.Airline = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("Airline")), typeof(string));
       else
        resultRow.Airline = null;
       if (!reader.IsDBNull(reader.GetOrdinal("Departure")))
        resultRow.Departure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("Departure")), typeof(string));
       if (!reader.IsDBNull(reader.GetOrdinal("Destination")))
        resultRow.Destination = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("Destination")), typeof(string));
       if (!reader.IsDBNull(reader.GetOrdinal("FlightDate")))
        resultRow.FlightDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("FlightDate")), typeof(System.DateTime));
       if (!reader.IsDBNull(reader.GetOrdinal("NonSmokingFlight")))
        resultRow.NonSmokingFlight = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("NonSmokingFlight")), typeof(bool));
       if (!reader.IsDBNull(reader.GetOrdinal("Seats")))
        resultRow.Seats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("Seats")), typeof(short));
       if (!reader.IsDBNull(reader.GetOrdinal("FreeSeats")))
        resultRow.FreeSeats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("FreeSeats")), typeof(short));
       else
        resultRow.FreeSeats = null;
       if (!reader.IsDBNull(reader.GetOrdinal("Pilot_PersonID")))
        resultRow.PilotPersonID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("Pilot_PersonID")), typeof(int));
       else
        resultRow.PilotPersonID = null;
       if (!reader.IsDBNull(reader.GetOrdinal("Memo")))
        resultRow.Memo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("Memo")), typeof(string));
       else
        resultRow.Memo = null;
       if (!reader.IsDBNull(reader.GetOrdinal("Strikebound")))
        resultRow.Strikebound = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("Strikebound")), typeof(bool));
       else
        resultRow.Strikebound = null;
       if (!reader.IsDBNull(reader.GetOrdinal("`Utilization `")))
        resultRow.Utilization = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("`Utilization `")), typeof(int));
       else
        resultRow.Utilization = null;
       result.Flights.Add(resultRow);
      }
      reader.NextResult();

      while (reader.Read())
      {

       GetFlightsAndTotalCountResult resultRow = new GetFlightsAndTotalCountResult();
       if (!reader.IsDBNull(reader.GetOrdinal("column0")))
        resultRow.column0 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("column0")), typeof(int));
       else
        resultRow.column0 = null;
       result.GetFlightsAndTotalCountResults.Add(resultRow);
      }
      reader.NextResult();

     }

    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
   return result;
  }

  public List<Flight> GetFlightsFromSP(string Departure)
  {

   List<Flight> result = new List<Flight>();

   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.StoredProcedure;
     cmd.CommandText = @"Operation.GetFlightsFromSP";

     DbParameter DepartureParameter = cmd.CreateParameter();
     DepartureParameter.ParameterName = "Departure";
     DepartureParameter.Direction = ParameterDirection.Input;
     if (Departure != null)
     {
      DepartureParameter.Value = Departure;
     }
     else
     {
      DepartureParameter.DbType = DbType.String;
      DepartureParameter.Size = -1;
      DepartureParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(DepartureParameter);

     using (IDataReader reader = cmd.ExecuteReader())
     {
      while (reader.Read())
      {
       Flight row = new Flight();
       if (!reader.IsDBNull(reader.GetOrdinal("FlightNo")))
        row.FlightNo = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightNo")), typeof(int));

       if (!reader.IsDBNull(reader.GetOrdinal("Timestamp")))
        row.Timestamp = (byte[])Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Timestamp")), typeof(byte[]));
       else
        row.Timestamp = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Airline")))
        row.Airline = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Airline")), typeof(string));
       else
        row.Airline = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Departure")))
        row.Departure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Departure")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("Destination")))
        row.Destination = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Destination")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("FlightDate")))
        row.FlightDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightDate")), typeof(System.DateTime));

       if (!reader.IsDBNull(reader.GetOrdinal("NonSmokingFlight")))
        row.NonSmokingFlight = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NonSmokingFlight")), typeof(bool));

       if (!reader.IsDBNull(reader.GetOrdinal("Seats")))
        row.Seats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Seats")), typeof(short));

       if (!reader.IsDBNull(reader.GetOrdinal("FreeSeats")))
        row.FreeSeats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FreeSeats")), typeof(short));
       else
        row.FreeSeats = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Pilot_PersonID")))
        row.PilotPersonID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pilot_PersonID")), typeof(int));
       else
        row.PilotPersonID = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Memo")))
        row.Memo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Memo")), typeof(string));
       else
        row.Memo = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Strikebound")))
        row.Strikebound = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Strikebound")), typeof(bool));
       else
        row.Strikebound = null;

       if (!reader.IsDBNull(reader.GetOrdinal("`Utilization `")))
        row.Utilization = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"`Utilization `")), typeof(int));
       else
        row.Utilization = null;

       result.Add(row);
      }
     }
    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
   return result;
  }

  public List<Flight> GetRoute(string von, string nach)
  {

   List<Flight> result = new List<Flight>();

   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.StoredProcedure;
     cmd.CommandText = @"Operation.GetRoute";

     DbParameter vonParameter = cmd.CreateParameter();
     vonParameter.ParameterName = "von";
     vonParameter.Direction = ParameterDirection.Input;
     if (von != null)
     {
      vonParameter.Value = von;
     }
     else
     {
      vonParameter.DbType = DbType.String;
      vonParameter.Size = -1;
      vonParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(vonParameter);

     DbParameter nachParameter = cmd.CreateParameter();
     nachParameter.ParameterName = "nach";
     nachParameter.Direction = ParameterDirection.Input;
     if (nach != null)
     {
      nachParameter.Value = nach;
     }
     else
     {
      nachParameter.DbType = DbType.String;
      nachParameter.Size = -1;
      nachParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(nachParameter);

     using (IDataReader reader = cmd.ExecuteReader())
     {
      while (reader.Read())
      {
       Flight row = new Flight();
       if (!reader.IsDBNull(reader.GetOrdinal("FlightNo")))
        row.FlightNo = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightNo")), typeof(int));

       if (!reader.IsDBNull(reader.GetOrdinal("Timestamp")))
        row.Timestamp = (byte[])Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Timestamp")), typeof(byte[]));
       else
        row.Timestamp = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Airline")))
        row.Airline = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Airline")), typeof(string));
       else
        row.Airline = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Departure")))
        row.Departure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Departure")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("Destination")))
        row.Destination = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Destination")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("FlightDate")))
        row.FlightDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightDate")), typeof(System.DateTime));

       if (!reader.IsDBNull(reader.GetOrdinal("NonSmokingFlight")))
        row.NonSmokingFlight = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NonSmokingFlight")), typeof(bool));

       if (!reader.IsDBNull(reader.GetOrdinal("Seats")))
        row.Seats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Seats")), typeof(short));

       if (!reader.IsDBNull(reader.GetOrdinal("FreeSeats")))
        row.FreeSeats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FreeSeats")), typeof(short));
       else
        row.FreeSeats = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Pilot_PersonID")))
        row.PilotPersonID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pilot_PersonID")), typeof(int));
       else
        row.PilotPersonID = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Memo")))
        row.Memo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Memo")), typeof(string));
       else
        row.Memo = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Strikebound")))
        row.Strikebound = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Strikebound")), typeof(bool));
       else
        row.Strikebound = null;

       if (!reader.IsDBNull(reader.GetOrdinal("`Utilization `")))
        row.Utilization = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"`Utilization `")), typeof(int));
       else
        row.Utilization = null;

       result.Add(row);
      }
     }
    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
   return result;
  }

  public List<InsertFlightResult> InsertFlight(System.Nullable<int> FlightNo, string Departure, string Destination, System.Nullable<System.DateTime> FlightDate, System.Nullable<bool> NonSmokingFlight, System.Nullable<short> Seats, System.Nullable<short> FreeSeats, System.Nullable<int> Pilot_PersonID, System.Nullable<System.DateTime> Airline, string Memo)
  {

   List<InsertFlightResult> result = new List<InsertFlightResult>();

   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.StoredProcedure;
     cmd.CommandText = @"Operation.InsertFlight";

     DbParameter FlightNoParameter = cmd.CreateParameter();
     FlightNoParameter.ParameterName = "FlightNo";
     FlightNoParameter.Direction = ParameterDirection.Input;
     if (FlightNo.HasValue)
     {
      FlightNoParameter.Value = FlightNo.Value;
     }
     else
     {
      FlightNoParameter.DbType = DbType.Int32;
      FlightNoParameter.Size = -1;
      FlightNoParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(FlightNoParameter);

     DbParameter DepartureParameter = cmd.CreateParameter();
     DepartureParameter.ParameterName = "Departure";
     DepartureParameter.Direction = ParameterDirection.Input;
     if (Departure != null)
     {
      DepartureParameter.Value = Departure;
     }
     else
     {
      DepartureParameter.DbType = DbType.String;
      DepartureParameter.Size = -1;
      DepartureParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(DepartureParameter);

     DbParameter DestinationParameter = cmd.CreateParameter();
     DestinationParameter.ParameterName = "Destination";
     DestinationParameter.Direction = ParameterDirection.Input;
     if (Destination != null)
     {
      DestinationParameter.Value = Destination;
     }
     else
     {
      DestinationParameter.DbType = DbType.String;
      DestinationParameter.Size = -1;
      DestinationParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(DestinationParameter);

     DbParameter FlightDateParameter = cmd.CreateParameter();
     FlightDateParameter.ParameterName = "FlightDate";
     FlightDateParameter.Direction = ParameterDirection.Input;
     if (FlightDate.HasValue)
     {
      FlightDateParameter.Value = FlightDate.Value;
     }
     else
     {
      FlightDateParameter.DbType = DbType.DateTime;
      FlightDateParameter.Size = -1;
      FlightDateParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(FlightDateParameter);

     DbParameter NonSmokingFlightParameter = cmd.CreateParameter();
     NonSmokingFlightParameter.ParameterName = "NonSmokingFlight";
     NonSmokingFlightParameter.Direction = ParameterDirection.Input;
     if (NonSmokingFlight.HasValue)
     {
      NonSmokingFlightParameter.Value = NonSmokingFlight.Value;
     }
     else
     {
      NonSmokingFlightParameter.DbType = DbType.Boolean;
      NonSmokingFlightParameter.Size = -1;
      NonSmokingFlightParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(NonSmokingFlightParameter);

     DbParameter SeatsParameter = cmd.CreateParameter();
     SeatsParameter.ParameterName = "Seats";
     SeatsParameter.Direction = ParameterDirection.Input;
     if (Seats.HasValue)
     {
      SeatsParameter.Value = Seats.Value;
     }
     else
     {
      SeatsParameter.DbType = DbType.Int16;
      SeatsParameter.Size = -1;
      SeatsParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(SeatsParameter);

     DbParameter FreeSeatsParameter = cmd.CreateParameter();
     FreeSeatsParameter.ParameterName = "FreeSeats";
     FreeSeatsParameter.Direction = ParameterDirection.Input;
     if (FreeSeats.HasValue)
     {
      FreeSeatsParameter.Value = FreeSeats.Value;
     }
     else
     {
      FreeSeatsParameter.DbType = DbType.Int16;
      FreeSeatsParameter.Size = -1;
      FreeSeatsParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(FreeSeatsParameter);

     DbParameter Pilot_PersonIDParameter = cmd.CreateParameter();
     Pilot_PersonIDParameter.ParameterName = "Pilot_PersonID";
     Pilot_PersonIDParameter.Direction = ParameterDirection.Input;
     if (Pilot_PersonID.HasValue)
     {
      Pilot_PersonIDParameter.Value = Pilot_PersonID.Value;
     }
     else
     {
      Pilot_PersonIDParameter.DbType = DbType.Int32;
      Pilot_PersonIDParameter.Size = -1;
      Pilot_PersonIDParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Pilot_PersonIDParameter);

     DbParameter AirlineParameter = cmd.CreateParameter();
     AirlineParameter.ParameterName = "Airline";
     AirlineParameter.Direction = ParameterDirection.Input;
     if (Airline.HasValue)
     {
      AirlineParameter.Value = Airline.Value;
     }
     else
     {
      AirlineParameter.DbType = DbType.DateTime;
      AirlineParameter.Size = -1;
      AirlineParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(AirlineParameter);

     DbParameter MemoParameter = cmd.CreateParameter();
     MemoParameter.ParameterName = "Memo";
     MemoParameter.Direction = ParameterDirection.Input;
     if (Memo != null)
     {
      MemoParameter.Value = Memo;
     }
     else
     {
      MemoParameter.DbType = DbType.String;
      MemoParameter.Size = -1;
      MemoParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(MemoParameter);

     using (IDataReader reader = cmd.ExecuteReader())
     {
      while (reader.Read())
      {
       InsertFlightResult row = new InsertFlightResult();
       if (!reader.IsDBNull(reader.GetOrdinal("FlightNo")))
        row.FlightNo = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightNo")), typeof(int));

       if (!reader.IsDBNull(reader.GetOrdinal("Departure")))
        row.Departure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Departure")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("Destination")))
        row.Destination = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Destination")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("FlightDate")))
        row.FlightDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightDate")), typeof(System.DateTime));

       if (!reader.IsDBNull(reader.GetOrdinal("NonSmokingFlight")))
        row.NonSmokingFlight = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NonSmokingFlight")), typeof(bool));

       if (!reader.IsDBNull(reader.GetOrdinal("Seats")))
        row.Seats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Seats")), typeof(short));

       if (!reader.IsDBNull(reader.GetOrdinal("FreeSeats")))
        row.FreeSeats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FreeSeats")), typeof(short));
       else
        row.FreeSeats = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Pilot_PersonID")))
        row.PilotPersonID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pilot_PersonID")), typeof(int));
       else
        row.PilotPersonID = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Airline")))
        row.Airline = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Airline")), typeof(string));
       else
        row.Airline = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Memo")))
        row.Memo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Memo")), typeof(string));
       else
        row.Memo = null;

       result.Add(row);
      }
     }
    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
   return result;
  }

  public List<UpdateFlightResult> UpdateFlight(System.Nullable<int> FlightNo, string Departure, string Destination, System.Nullable<System.DateTime> FlightDate, System.Nullable<bool> NonSmokingFlight, System.Nullable<short> Seats, System.Nullable<short> FreeSeats, System.Nullable<int> Pilot_PersonID, System.Nullable<System.DateTime> Airline, string Memo, System.Nullable<int> Original_FlightNo, string Original_Departure, string Original_Destination, System.Nullable<System.DateTime> Original_FlightDate, System.Nullable<bool> Original_NonSmokingFlight, System.Nullable<short> Original_Seats, System.Nullable<short> Original_FreeSeats, System.Nullable<int> Original_Pilot_PersonID, System.Nullable<System.DateTime> Original_Airline)
  {

   List<UpdateFlightResult> result = new List<UpdateFlightResult>();

   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.StoredProcedure;
     cmd.CommandText = @"Operation.UpdateFlight";

     DbParameter FlightNoParameter = cmd.CreateParameter();
     FlightNoParameter.ParameterName = "FlightNo";
     FlightNoParameter.Direction = ParameterDirection.Input;
     if (FlightNo.HasValue)
     {
      FlightNoParameter.Value = FlightNo.Value;
     }
     else
     {
      FlightNoParameter.DbType = DbType.Int32;
      FlightNoParameter.Size = -1;
      FlightNoParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(FlightNoParameter);

     DbParameter DepartureParameter = cmd.CreateParameter();
     DepartureParameter.ParameterName = "Departure";
     DepartureParameter.Direction = ParameterDirection.Input;
     if (Departure != null)
     {
      DepartureParameter.Value = Departure;
     }
     else
     {
      DepartureParameter.DbType = DbType.String;
      DepartureParameter.Size = -1;
      DepartureParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(DepartureParameter);

     DbParameter DestinationParameter = cmd.CreateParameter();
     DestinationParameter.ParameterName = "Destination";
     DestinationParameter.Direction = ParameterDirection.Input;
     if (Destination != null)
     {
      DestinationParameter.Value = Destination;
     }
     else
     {
      DestinationParameter.DbType = DbType.String;
      DestinationParameter.Size = -1;
      DestinationParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(DestinationParameter);

     DbParameter FlightDateParameter = cmd.CreateParameter();
     FlightDateParameter.ParameterName = "FlightDate";
     FlightDateParameter.Direction = ParameterDirection.Input;
     if (FlightDate.HasValue)
     {
      FlightDateParameter.Value = FlightDate.Value;
     }
     else
     {
      FlightDateParameter.DbType = DbType.DateTime;
      FlightDateParameter.Size = -1;
      FlightDateParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(FlightDateParameter);

     DbParameter NonSmokingFlightParameter = cmd.CreateParameter();
     NonSmokingFlightParameter.ParameterName = "NonSmokingFlight";
     NonSmokingFlightParameter.Direction = ParameterDirection.Input;
     if (NonSmokingFlight.HasValue)
     {
      NonSmokingFlightParameter.Value = NonSmokingFlight.Value;
     }
     else
     {
      NonSmokingFlightParameter.DbType = DbType.Boolean;
      NonSmokingFlightParameter.Size = -1;
      NonSmokingFlightParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(NonSmokingFlightParameter);

     DbParameter SeatsParameter = cmd.CreateParameter();
     SeatsParameter.ParameterName = "Seats";
     SeatsParameter.Direction = ParameterDirection.Input;
     if (Seats.HasValue)
     {
      SeatsParameter.Value = Seats.Value;
     }
     else
     {
      SeatsParameter.DbType = DbType.Int16;
      SeatsParameter.Size = -1;
      SeatsParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(SeatsParameter);

     DbParameter FreeSeatsParameter = cmd.CreateParameter();
     FreeSeatsParameter.ParameterName = "FreeSeats";
     FreeSeatsParameter.Direction = ParameterDirection.Input;
     if (FreeSeats.HasValue)
     {
      FreeSeatsParameter.Value = FreeSeats.Value;
     }
     else
     {
      FreeSeatsParameter.DbType = DbType.Int16;
      FreeSeatsParameter.Size = -1;
      FreeSeatsParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(FreeSeatsParameter);

     DbParameter Pilot_PersonIDParameter = cmd.CreateParameter();
     Pilot_PersonIDParameter.ParameterName = "Pilot_PersonID";
     Pilot_PersonIDParameter.Direction = ParameterDirection.Input;
     if (Pilot_PersonID.HasValue)
     {
      Pilot_PersonIDParameter.Value = Pilot_PersonID.Value;
     }
     else
     {
      Pilot_PersonIDParameter.DbType = DbType.Int32;
      Pilot_PersonIDParameter.Size = -1;
      Pilot_PersonIDParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Pilot_PersonIDParameter);

     DbParameter AirlineParameter = cmd.CreateParameter();
     AirlineParameter.ParameterName = "Airline";
     AirlineParameter.Direction = ParameterDirection.Input;
     if (Airline.HasValue)
     {
      AirlineParameter.Value = Airline.Value;
     }
     else
     {
      AirlineParameter.DbType = DbType.DateTime;
      AirlineParameter.Size = -1;
      AirlineParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(AirlineParameter);

     DbParameter MemoParameter = cmd.CreateParameter();
     MemoParameter.ParameterName = "Memo";
     MemoParameter.Direction = ParameterDirection.Input;
     if (Memo != null)
     {
      MemoParameter.Value = Memo;
     }
     else
     {
      MemoParameter.DbType = DbType.String;
      MemoParameter.Size = -1;
      MemoParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(MemoParameter);

     DbParameter Original_FlightNoParameter = cmd.CreateParameter();
     Original_FlightNoParameter.ParameterName = "Original_FlightNo";
     Original_FlightNoParameter.Direction = ParameterDirection.Input;
     if (Original_FlightNo.HasValue)
     {
      Original_FlightNoParameter.Value = Original_FlightNo.Value;
     }
     else
     {
      Original_FlightNoParameter.DbType = DbType.Int32;
      Original_FlightNoParameter.Size = -1;
      Original_FlightNoParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_FlightNoParameter);

     DbParameter Original_DepartureParameter = cmd.CreateParameter();
     Original_DepartureParameter.ParameterName = "Original_Departure";
     Original_DepartureParameter.Direction = ParameterDirection.Input;
     if (Original_Departure != null)
     {
      Original_DepartureParameter.Value = Original_Departure;
     }
     else
     {
      Original_DepartureParameter.DbType = DbType.String;
      Original_DepartureParameter.Size = -1;
      Original_DepartureParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_DepartureParameter);

     DbParameter Original_DestinationParameter = cmd.CreateParameter();
     Original_DestinationParameter.ParameterName = "Original_Destination";
     Original_DestinationParameter.Direction = ParameterDirection.Input;
     if (Original_Destination != null)
     {
      Original_DestinationParameter.Value = Original_Destination;
     }
     else
     {
      Original_DestinationParameter.DbType = DbType.String;
      Original_DestinationParameter.Size = -1;
      Original_DestinationParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_DestinationParameter);

     DbParameter Original_FlightDateParameter = cmd.CreateParameter();
     Original_FlightDateParameter.ParameterName = "Original_FlightDate";
     Original_FlightDateParameter.Direction = ParameterDirection.Input;
     if (Original_FlightDate.HasValue)
     {
      Original_FlightDateParameter.Value = Original_FlightDate.Value;
     }
     else
     {
      Original_FlightDateParameter.DbType = DbType.DateTime;
      Original_FlightDateParameter.Size = -1;
      Original_FlightDateParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_FlightDateParameter);

     DbParameter Original_NonSmokingFlightParameter = cmd.CreateParameter();
     Original_NonSmokingFlightParameter.ParameterName = "Original_NonSmokingFlight";
     Original_NonSmokingFlightParameter.Direction = ParameterDirection.Input;
     if (Original_NonSmokingFlight.HasValue)
     {
      Original_NonSmokingFlightParameter.Value = Original_NonSmokingFlight.Value;
     }
     else
     {
      Original_NonSmokingFlightParameter.DbType = DbType.Boolean;
      Original_NonSmokingFlightParameter.Size = -1;
      Original_NonSmokingFlightParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_NonSmokingFlightParameter);

     DbParameter Original_SeatsParameter = cmd.CreateParameter();
     Original_SeatsParameter.ParameterName = "Original_Seats";
     Original_SeatsParameter.Direction = ParameterDirection.Input;
     if (Original_Seats.HasValue)
     {
      Original_SeatsParameter.Value = Original_Seats.Value;
     }
     else
     {
      Original_SeatsParameter.DbType = DbType.Int16;
      Original_SeatsParameter.Size = -1;
      Original_SeatsParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_SeatsParameter);

     DbParameter Original_FreeSeatsParameter = cmd.CreateParameter();
     Original_FreeSeatsParameter.ParameterName = "Original_FreeSeats";
     Original_FreeSeatsParameter.Direction = ParameterDirection.Input;
     if (Original_FreeSeats.HasValue)
     {
      Original_FreeSeatsParameter.Value = Original_FreeSeats.Value;
     }
     else
     {
      Original_FreeSeatsParameter.DbType = DbType.Int16;
      Original_FreeSeatsParameter.Size = -1;
      Original_FreeSeatsParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_FreeSeatsParameter);

     DbParameter Original_Pilot_PersonIDParameter = cmd.CreateParameter();
     Original_Pilot_PersonIDParameter.ParameterName = "Original_Pilot_PersonID";
     Original_Pilot_PersonIDParameter.Direction = ParameterDirection.Input;
     if (Original_Pilot_PersonID.HasValue)
     {
      Original_Pilot_PersonIDParameter.Value = Original_Pilot_PersonID.Value;
     }
     else
     {
      Original_Pilot_PersonIDParameter.DbType = DbType.Int32;
      Original_Pilot_PersonIDParameter.Size = -1;
      Original_Pilot_PersonIDParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_Pilot_PersonIDParameter);

     DbParameter Original_AirlineParameter = cmd.CreateParameter();
     Original_AirlineParameter.ParameterName = "Original_Airline";
     Original_AirlineParameter.Direction = ParameterDirection.Input;
     if (Original_Airline.HasValue)
     {
      Original_AirlineParameter.Value = Original_Airline.Value;
     }
     else
     {
      Original_AirlineParameter.DbType = DbType.DateTime;
      Original_AirlineParameter.Size = -1;
      Original_AirlineParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(Original_AirlineParameter);

     using (IDataReader reader = cmd.ExecuteReader())
     {
      while (reader.Read())
      {
       UpdateFlightResult row = new UpdateFlightResult();
       if (!reader.IsDBNull(reader.GetOrdinal("FlightNo")))
        row.FlightNo = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightNo")), typeof(int));

       if (!reader.IsDBNull(reader.GetOrdinal("Departure")))
        row.Departure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Departure")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("Destination")))
        row.Destination = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Destination")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("FlightDate")))
        row.FlightDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightDate")), typeof(System.DateTime));

       if (!reader.IsDBNull(reader.GetOrdinal("NonSmokingFlight")))
        row.NonSmokingFlight = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NonSmokingFlight")), typeof(bool));

       if (!reader.IsDBNull(reader.GetOrdinal("Seats")))
        row.Seats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Seats")), typeof(short));

       if (!reader.IsDBNull(reader.GetOrdinal("FreeSeats")))
        row.FreeSeats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FreeSeats")), typeof(short));
       else
        row.FreeSeats = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Pilot_PersonID")))
        row.PilotPersonID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pilot_PersonID")), typeof(int));
       else
        row.PilotPersonID = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Airline")))
        row.Airline = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Airline")), typeof(string));
       else
        row.Airline = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Memo")))
        row.Memo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Memo")), typeof(string));
       else
        row.Memo = null;

       result.Add(row);
      }
     }
    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
   return result;
  }

  public List<Flight> GetFlightsFromTVF(string Departure)
  {

   List<Flight> result = new List<Flight>();

   DbConnection connection = this.Database.GetDbConnection();
   bool needClose = false;
   if (connection.State != ConnectionState.Open)
   {
    connection.Open();
    needClose = true;
   }

   try
   {
    using (DbCommand cmd = connection.CreateCommand())
    {
     if (this.Database.GetCommandTimeout().HasValue)
      cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
     cmd.CommandType = CommandType.Text;
     cmd.CommandText = @"select * from Operation.GetFlightsFromTVF(:Departure)";

     DbParameter DepartureParameter = cmd.CreateParameter();
     DepartureParameter.ParameterName = "Departure";
     DepartureParameter.Direction = ParameterDirection.Input;
     if (Departure != null)
     {
      DepartureParameter.Value = Departure;
     }
     else
     {
      DepartureParameter.DbType = DbType.String;
      DepartureParameter.Size = -1;
      DepartureParameter.Value = DBNull.Value;
     }
     cmd.Parameters.Add(DepartureParameter);

     using (IDataReader reader = cmd.ExecuteReader())
     {
      while (reader.Read())
      {
       Flight row = new Flight();
       if (!reader.IsDBNull(reader.GetOrdinal("FlightNo")))
        row.FlightNo = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightNo")), typeof(int));

       if (!reader.IsDBNull(reader.GetOrdinal("Timestamp")))
        row.Timestamp = (byte[])Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Timestamp")), typeof(byte[]));
       else
        row.Timestamp = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Airline")))
        row.Airline = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Airline")), typeof(string));
       else
        row.Airline = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Departure")))
        row.Departure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Departure")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("Destination")))
        row.Destination = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Destination")), typeof(string));

       if (!reader.IsDBNull(reader.GetOrdinal("FlightDate")))
        row.FlightDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FlightDate")), typeof(System.DateTime));

       if (!reader.IsDBNull(reader.GetOrdinal("NonSmokingFlight")))
        row.NonSmokingFlight = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NonSmokingFlight")), typeof(bool));

       if (!reader.IsDBNull(reader.GetOrdinal("Seats")))
        row.Seats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Seats")), typeof(short));

       if (!reader.IsDBNull(reader.GetOrdinal("FreeSeats")))
        row.FreeSeats = (short)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FreeSeats")), typeof(short));
       else
        row.FreeSeats = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Pilot_PersonID")))
        row.PilotPersonID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pilot_PersonID")), typeof(int));
       else
        row.PilotPersonID = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Memo")))
        row.Memo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Memo")), typeof(string));
       else
        row.Memo = null;

       if (!reader.IsDBNull(reader.GetOrdinal("Strikebound")))
        row.Strikebound = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Strikebound")), typeof(bool));
       else
        row.Strikebound = null;

       if (!reader.IsDBNull(reader.GetOrdinal("`Utilization `")))
        row.Utilization = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"`Utilization `")), typeof(int));
       else
        row.Utilization = null;

       result.Add(row);
      }
     }
    }
   }
   finally
   {
    if (needClose)
     connection.Close();
   }
   return result;
  }

  #endregion

  protected override void OnModelCreating(ModelBuilder modelBuilder)
  {
   this.FlightMapping(modelBuilder);
   this.CustomizeFlightMapping(modelBuilder);

   this.FlightPassengerMapping(modelBuilder);
   this.CustomizeFlightPassengerMapping(modelBuilder);

   this.AllBookingsMapping(modelBuilder);
   this.CustomizeAllBookingsMapping(modelBuilder);

   this.AllEmployeesMapping(modelBuilder);
   this.CustomizeAllEmployeesMapping(modelBuilder);

   this.AllPassengersMapping(modelBuilder);
   this.CustomizeAllPassengersMapping(modelBuilder);

   this.FlightsFromRomeMapping(modelBuilder);
   this.CustomizeFlightsFromRomeMapping(modelBuilder);

   this.EmployeeMapping(modelBuilder);
   this.CustomizeEmployeeMapping(modelBuilder);

   this.PassengerMapping(modelBuilder);
   this.CustomizePassengerMapping(modelBuilder);

   this.PersonMapping(modelBuilder);
   this.CustomizePersonMapping(modelBuilder);

   this.PilotMapping(modelBuilder);
   this.CustomizePilotMapping(modelBuilder);

   this.AirportMapping(modelBuilder);
   this.CustomizeAirportMapping(modelBuilder);

   RelationshipsMapping(modelBuilder);
   CustomizeMapping(ref modelBuilder);
  }

  #region Flight Mapping

  private void FlightMapping(ModelBuilder modelBuilder)
  {
   modelBuilder.Entity<Flight>().ToTable(@"Flight", @"Operation");
   modelBuilder.Entity<Flight>().Property<int>(x => x.FlightNo).HasColumnName(@"FlightNo").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<Flight>().Property<byte[]>(x => x.Timestamp).HasColumnName(@"Timestamp").HasColumnType(@"timestamp").IsConcurrencyToken().ValueGeneratedOnAddOrUpdate();
   modelBuilder.Entity<Flight>().Property<string>(x => x.Airline).HasColumnName(@"Airline").HasColumnType(@"nvarchar(3)").ValueGeneratedNever().HasMaxLength(3);
   modelBuilder.Entity<Flight>().Property<string>(x => x.Departure).HasColumnName(@"Departure").HasColumnType(@"nvarchar(30)").IsRequired().ValueGeneratedNever().HasMaxLength(30);
   modelBuilder.Entity<Flight>().Property<string>(x => x.Destination).HasColumnName(@"Destination").HasColumnType(@"nvarchar(30)").IsRequired().ValueGeneratedNever().HasMaxLength(30);
   modelBuilder.Entity<Flight>().Property<System.DateTime>(x => x.FlightDate).HasColumnName(@"FlightDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<Flight>().Property<bool>(x => x.NonSmokingFlight).HasColumnName(@"NonSmokingFlight").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<Flight>().Property<short>(x => x.Seats).HasColumnName(@"Seats").HasColumnType(@"smallint").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<Flight>().Property<System.Nullable<short>>(x => x.FreeSeats).HasColumnName(@"FreeSeats").HasColumnType(@"smallint").ValueGeneratedNever();
   modelBuilder.Entity<Flight>().Property<System.Nullable<int>>(x => x.PilotPersonID).HasColumnName(@"Pilot_PersonID").HasColumnType(@"int").ValueGeneratedNever();
   modelBuilder.Entity<Flight>().Property<string>(x => x.Memo).HasColumnName(@"Memo").HasColumnType(@"varchar(max)").ValueGeneratedNever();
   modelBuilder.Entity<Flight>().Property<System.Nullable<bool>>(x => x.Strikebound).HasColumnName(@"Strikebound").HasColumnType(@"bit").ValueGeneratedNever();
   modelBuilder.Entity<Flight>().Property<System.Nullable<int>>(x => x.Utilization).HasColumnName(@"Utilization ").HasColumnType(@"int").ValueGeneratedNever();
   modelBuilder.Entity<Flight>().HasKey(@"FlightNo");
  }

  partial void CustomizeFlightMapping(ModelBuilder modelBuilder);

  #endregion

  #region FlightPassenger Mapping

  private void FlightPassengerMapping(ModelBuilder modelBuilder)
  {
   modelBuilder.Entity<FlightPassenger>().ToTable(@"Flight_Passenger", @"Operation");
   modelBuilder.Entity<FlightPassenger>().Property<int>(x => x.FlightFlightNo).HasColumnName(@"Flight_FlightNo").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<FlightPassenger>().Property<int>(x => x.PassengerPersonID).HasColumnName(@"Passenger_PersonID").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<FlightPassenger>().HasKey(@"FlightFlightNo", @"PassengerPersonID");
  }

  partial void CustomizeFlightPassengerMapping(ModelBuilder modelBuilder);

  #endregion

  #region AllBookings Mapping

  private void AllBookingsMapping(ModelBuilder modelBuilder)
  {
   modelBuilder.Entity<AllBookings>().ToTable(@"AllBookings", @"Operation");
   modelBuilder.Entity<AllBookings>().Property<int>(x => x.FlightNo).HasColumnName(@"FlightNo").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<AllBookings>().Property<string>(x => x.Departure).HasColumnName(@"Departure").HasColumnType(@"nvarchar(30)").IsRequired().ValueGeneratedNever().HasMaxLength(30);
   modelBuilder.Entity<AllBookings>().Property<string>(x => x.Destination).HasColumnName(@"Destination").HasColumnType(@"nvarchar(30)").IsRequired().ValueGeneratedNever().HasMaxLength(30);
   modelBuilder.Entity<AllBookings>().Property<System.DateTime>(x => x.FlightDate).HasColumnName(@"FlightDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<AllBookings>().Property<int>(x => x.PersonID).HasColumnName(@"PersonID").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<AllBookings>().HasKey(@"FlightNo");
  }

  partial void CustomizeAllBookingsMapping(ModelBuilder modelBuilder);

  #endregion

  #region AllEmployees Mapping

  private void AllEmployeesMapping(ModelBuilder modelBuilder)
  {
   modelBuilder.Entity<AllEmployees>().ToTable(@"AllEmployees", @"Operation");
   modelBuilder.Entity<AllEmployees>().Property<int>(x => x.PersonID).HasColumnName(@"PersonID").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<AllEmployees>().Property<System.Nullable<System.DateTime>>(x => x.HireDate).HasColumnName(@"HireDate").HasColumnType(@"datetime").ValueGeneratedNever();
   modelBuilder.Entity<AllEmployees>().Property<System.Nullable<int>>(x => x.EmployeeNo).HasColumnName(@"EmployeeNo").HasColumnType(@"int").ValueGeneratedNever();
   modelBuilder.Entity<AllEmployees>().Property<System.Nullable<int>>(x => x.SupervisorPersonID).HasColumnName(@"Supervisor_PersonID").HasColumnType(@"int").ValueGeneratedNever();
   modelBuilder.Entity<AllEmployees>().Property<string>(x => x.SurName).HasColumnName(@"SurName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
   modelBuilder.Entity<AllEmployees>().Property<string>(x => x.GivenName).HasColumnName(@"GivenName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
   modelBuilder.Entity<AllEmployees>().Property<string>(x => x.Country).HasColumnName(@"Country").HasColumnType(@"nvarchar(2)").ValueGeneratedNever().HasMaxLength(2);
   modelBuilder.Entity<AllEmployees>().Property<System.Nullable<System.DateTime>>(x => x.Birthday).HasColumnName(@"Birthday").HasColumnType(@"datetime").ValueGeneratedNever();
   modelBuilder.Entity<AllEmployees>().Property<byte[]>(x => x.Photo).HasColumnName(@"Photo").HasColumnType(@"varbinary(max)").ValueGeneratedNever();
   modelBuilder.Entity<AllEmployees>().Property<string>(x => x.EMail).HasColumnName(@"EMail").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
   modelBuilder.Entity<AllEmployees>().HasKey(@"PersonID");
  }

  partial void CustomizeAllEmployeesMapping(ModelBuilder modelBuilder);

  #endregion

  #region AllPassengers Mapping

  private void AllPassengersMapping(ModelBuilder modelBuilder)
  {
   modelBuilder.Entity<AllPassengers>().ToTable(@"AllPassengers", @"Operation");
   modelBuilder.Entity<AllPassengers>().Property<int>(x => x.PersonID).HasColumnName(@"PersonID").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<AllPassengers>().Property<System.Nullable<System.DateTime>>(x => x.CustomerSince).HasColumnName(@"CustomerSince").HasColumnType(@"datetime").ValueGeneratedNever();
   modelBuilder.Entity<AllPassengers>().Property<string>(x => x.PassengerStatus).HasColumnName(@"PassengerStatus").HasColumnType(@"nchar(1)").ValueGeneratedNever().HasMaxLength(1);
   modelBuilder.Entity<AllPassengers>().Property<string>(x => x.SurName).HasColumnName(@"SurName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
   modelBuilder.Entity<AllPassengers>().Property<string>(x => x.GivenName).HasColumnName(@"GivenName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
   modelBuilder.Entity<AllPassengers>().Property<string>(x => x.Country).HasColumnName(@"Country").HasColumnType(@"nvarchar(2)").ValueGeneratedNever().HasMaxLength(2);
   modelBuilder.Entity<AllPassengers>().Property<System.Nullable<System.DateTime>>(x => x.Birthday).HasColumnName(@"Birthday").HasColumnType(@"datetime").ValueGeneratedNever();
   modelBuilder.Entity<AllPassengers>().Property<byte[]>(x => x.Photo).HasColumnName(@"Photo").HasColumnType(@"varbinary(max)").ValueGeneratedNever();
   modelBuilder.Entity<AllPassengers>().Property<string>(x => x.EMail).HasColumnName(@"EMail").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
   modelBuilder.Entity<AllPassengers>().HasKey(@"PersonID");
  }

  partial void CustomizeAllPassengersMapping(ModelBuilder modelBuilder);

  #endregion

  #region FlightsFromRome Mapping

  private void FlightsFromRomeMapping(ModelBuilder modelBuilder)
  {
   modelBuilder.Entity<FlightsFromRome>().ToTable(@"FlightsFromRome", @"Operation");
   modelBuilder.Entity<FlightsFromRome>().Property<int>(x => x.FlightNo).HasColumnName(@"FlightNo").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<FlightsFromRome>().Property<string>(x => x.Departure).HasColumnName(@"Departure").HasColumnType(@"nvarchar(30)").IsRequired().ValueGeneratedNever().HasMaxLength(30);
   modelBuilder.Entity<FlightsFromRome>().Property<System.DateTime>(x => x.FlightDate).HasColumnName(@"FlightDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<FlightsFromRome>().Property<string>(x => x.Destination).HasColumnName(@"Destination").HasColumnType(@"nvarchar(30)").IsRequired().ValueGeneratedNever().HasMaxLength(30);
   modelBuilder.Entity<FlightsFromRome>().Property<bool>(x => x.NonSmokingFlight).HasColumnName(@"NonSmokingFlight").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<FlightsFromRome>().Property<short>(x => x.Seats).HasColumnName(@"Seats").HasColumnType(@"smallint").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<FlightsFromRome>().Property<string>(x => x.Memo).HasColumnName(@"Memo").HasColumnType(@"varchar(max)").ValueGeneratedNever();
   modelBuilder.Entity<FlightsFromRome>().Property<System.Nullable<short>>(x => x.FreeSeats).HasColumnName(@"FreeSeats").HasColumnType(@"smallint").ValueGeneratedNever();
   modelBuilder.Entity<FlightsFromRome>().Property<System.Nullable<int>>(x => x.PilotPersonID).HasColumnName(@"Pilot_PersonID").HasColumnType(@"int").ValueGeneratedNever();
   modelBuilder.Entity<FlightsFromRome>().HasKey(@"FlightNo");
  }

  partial void CustomizeFlightsFromRomeMapping(ModelBuilder modelBuilder);

  #endregion

  #region Employee Mapping

  private void EmployeeMapping(ModelBuilder modelBuilder)
  {
   modelBuilder.Entity<Employee>().ToTable(@"Employee", @"People");
   modelBuilder.Entity<Employee>().Property<int>(x => x.PersonID).HasColumnName(@"PersonID").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<Employee>().Property<System.Nullable<int>>(x => x.EmployeeNo).HasColumnName(@"EmployeeNo").HasColumnType(@"int").ValueGeneratedNever();
   modelBuilder.Entity<Employee>().Property<System.Nullable<System.DateTime>>(x => x.HireDate).HasColumnName(@"HireDate").HasColumnType(@"datetime").ValueGeneratedNever();
   modelBuilder.Entity<Employee>().Property<System.Nullable<int>>(x => x.SupervisorPersonID).HasColumnName(@"Supervisor_PersonID").HasColumnType(@"int").ValueGeneratedNever();
   modelBuilder.Entity<Employee>().HasKey(@"PersonID");
  }

  partial void CustomizeEmployeeMapping(ModelBuilder modelBuilder);

  #endregion

  #region Passenger Mapping

  private void PassengerMapping(ModelBuilder modelBuilder)
  {
   modelBuilder.Entity<Passenger>().ToTable(@"Passenger", @"People");
   modelBuilder.Entity<Passenger>().Property<int>(x => x.PersonID).HasColumnName(@"PersonID").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<Passenger>().Property<System.Nullable<System.DateTime>>(x => x.CustomerSince).HasColumnName(@"CustomerSince").HasColumnType(@"datetime").ValueGeneratedNever();
   modelBuilder.Entity<Passenger>().Property<string>(x => x.PassengerStatus).HasColumnName(@"PassengerStatus").HasColumnType(@"nchar(1)").ValueGeneratedNever().HasMaxLength(1);
   modelBuilder.Entity<Passenger>().HasKey(@"PersonID");
  }

  partial void CustomizePassengerMapping(ModelBuilder modelBuilder);

  #endregion

  #region Person Mapping

  private void PersonMapping(ModelBuilder modelBuilder)
  {
   modelBuilder.Entity<Person>().ToTable(@"Person", @"People");
   modelBuilder.Entity<Person>().Property<int>(x => x.PersonID).HasColumnName(@"PersonID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
   modelBuilder.Entity<Person>().Property<string>(x => x.Surname).HasColumnName(@"Surname").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
   modelBuilder.Entity<Person>().Property<string>(x => x.GivenName).HasColumnName(@"GivenName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
   modelBuilder.Entity<Person>().Property<string>(x => x.Country).HasColumnName(@"Country").HasColumnType(@"nvarchar(2)").ValueGeneratedNever().HasMaxLength(2);
   modelBuilder.Entity<Person>().Property<System.Nullable<System.DateTime>>(x => x.Birthday).HasColumnName(@"Birthday").HasColumnType(@"datetime").ValueGeneratedNever();
   modelBuilder.Entity<Person>().Property<byte[]>(x => x.Photo).HasColumnName(@"Photo").HasColumnType(@"varbinary(max)").ValueGeneratedNever();
   modelBuilder.Entity<Person>().Property<string>(x => x.EMail).HasColumnName(@"EMail").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
   modelBuilder.Entity<Person>().Property<string>(x => x.City).HasColumnName(@"City").HasColumnType(@"nvarchar(30)").ValueGeneratedNever().HasMaxLength(30);
   modelBuilder.Entity<Person>().Property<string>(x => x.Memo).HasColumnName(@"Memo").HasColumnType(@"varchar(max)").ValueGeneratedNever();
   modelBuilder.Entity<Person>().HasKey(@"PersonID");
  }

  partial void CustomizePersonMapping(ModelBuilder modelBuilder);

  #endregion

  #region Pilot Mapping

  private void PilotMapping(ModelBuilder modelBuilder)
  {
   modelBuilder.Entity<Pilot>().ToTable(@"Pilot", @"People");
   modelBuilder.Entity<Pilot>().Property<int>(x => x.PersonID).HasColumnName(@"PersonID").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
   modelBuilder.Entity<Pilot>().Property<System.Nullable<System.DateTime>>(x => x.LicenseDate).HasColumnName(@"LicenseDate").HasColumnType(@"datetime").ValueGeneratedNever();
   modelBuilder.Entity<Pilot>().Property<string>(x => x.Flightscheintyp).HasColumnName(@"Flightscheintyp").HasColumnType(@"nchar(1)").ValueGeneratedNever().HasMaxLength(1);
   modelBuilder.Entity<Pilot>().Property<System.Nullable<int>>(x => x.FlightHours).HasColumnName(@"FlightHours").HasColumnType(@"int").ValueGeneratedNever();
   modelBuilder.Entity<Pilot>().Property<string>(x => x.FlightSchool).HasColumnName(@"FlightSchool").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
   modelBuilder.Entity<Pilot>().HasKey(@"PersonID");
  }

  partial void CustomizePilotMapping(ModelBuilder modelBuilder);

  #endregion

  #region Airport Mapping

  private void AirportMapping(ModelBuilder modelBuilder)
  {
   modelBuilder.Entity<Airport>().ToTable(@"Airport", @"Properties");
   modelBuilder.Entity<Airport>().Property<string>(x => x.Surname).HasColumnName(@"Surname").HasColumnType(@"nchar(30)").IsRequired().ValueGeneratedNever().HasMaxLength(30);
   modelBuilder.Entity<Airport>().Property<System.Nullable<int>>(x => x.Typ).HasColumnName(@"Typ").HasColumnType(@"int").ValueGeneratedNever();
   modelBuilder.Entity<Airport>().HasKey(@"Surname");
  }

  partial void CustomizeAirportMapping(ModelBuilder modelBuilder);

  #endregion

  private void RelationshipsMapping(ModelBuilder modelBuilder)
  {

   #region Flight Navigation properties

   modelBuilder.Entity<Flight>().HasOne(x => x.Pilot).WithMany(op => op.Flights).IsRequired(false).HasForeignKey(@"PilotPersonID");
   modelBuilder.Entity<Flight>().HasMany(x => x.FlightPassengers).WithOne(op => op.Flight).IsRequired(true).HasForeignKey(@"FlightFlightNo");

   #endregion

   #region FlightPassenger Navigation properties

   modelBuilder.Entity<FlightPassenger>().HasOne(x => x.Flight).WithMany(op => op.FlightPassengers).IsRequired(true).HasForeignKey(@"FlightFlightNo");
   modelBuilder.Entity<FlightPassenger>().HasOne(x => x.Passenger).WithMany(op => op.FlightPassengers).IsRequired(true).HasForeignKey(@"PassengerPersonID");

   #endregion

   #region Employee Navigation properties

   modelBuilder.Entity<Employee>().HasMany(x => x.Employees_SupervisorPersonID).WithOne(op => op.Employee_SupervisorPersonID).IsRequired(false).HasForeignKey(@"SupervisorPersonID");
   modelBuilder.Entity<Employee>().HasOne(x => x.Employee_SupervisorPersonID).WithMany(op => op.Employees_SupervisorPersonID).IsRequired(false).HasForeignKey(@"SupervisorPersonID");
   modelBuilder.Entity<Employee>().HasOne(x => x.Person).WithOne(op => op.Employee).IsRequired(true).HasForeignKey(typeof(Employee), @"PersonID");
   modelBuilder.Entity<Employee>().HasOne(x => x.Pilot).WithOne(op => op.Employee).IsRequired(true).HasForeignKey(typeof(Pilot), @"PersonID");

   #endregion

   #region Passenger Navigation properties

   modelBuilder.Entity<Passenger>().HasMany(x => x.FlightPassengers).WithOne(op => op.Passenger).IsRequired(true).HasForeignKey(@"PassengerPersonID");
   modelBuilder.Entity<Passenger>().HasOne(x => x.Person).WithOne(op => op.Passenger).IsRequired(true).HasForeignKey(typeof(Passenger), @"PersonID");

   #endregion

   #region Person Navigation properties

   modelBuilder.Entity<Person>().HasOne(x => x.Employee).WithOne(op => op.Person).IsRequired(true).HasForeignKey(typeof(Employee), @"PersonID");
   modelBuilder.Entity<Person>().HasOne(x => x.Passenger).WithOne(op => op.Person).IsRequired(true).HasForeignKey(typeof(Passenger), @"PersonID");

   #endregion

   #region Pilot Navigation properties

   modelBuilder.Entity<Pilot>().HasMany(x => x.Flights).WithOne(op => op.Pilot).IsRequired(false).HasForeignKey(@"PilotPersonID");
   modelBuilder.Entity<Pilot>().HasOne(x => x.Employee).WithOne(op => op.Pilot).IsRequired(true).HasForeignKey(typeof(Pilot), @"PersonID");

   #endregion
  }

  partial void CustomizeMapping(ref ModelBuilder modelBuilder);

  public bool HasChanges()
  {
   return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
  }

  partial void OnCreated();
 }

 public class GetFlightsAndTotalCountMultipleResult
 {

  public GetFlightsAndTotalCountMultipleResult()
  {
   Flights = new List<Flight>();
   GetFlightsAndTotalCountResults = new List<GetFlightsAndTotalCountResult>();
  }

  public List<Flight> Flights { get; private set; }
  public List<GetFlightsAndTotalCountResult> GetFlightsAndTotalCountResults { get; private set; }
 }
}
