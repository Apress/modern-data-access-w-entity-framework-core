<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Z.EntityFramework.Plus.EFCore</name>
    </assembly>
    <members>
        <member name="M:Z.EntityFramework.Plus.InternalExtensions.SelectByName``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{System.String})">
            <summary>Select from the query all names.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="query">The query to select name from.</param>
            <param name="names">The name to select.</param>
            <returns>An IQueryable with the name selected.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.InternalExtensions.CreateStoreCommand(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>A DbContext extension method that creates a new store command.</summary>
            <param name="context">The context to act on.</param>
            <returns>The new store command from the DbContext.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.InternalExtensions.GetDbContext(System.Linq.IQueryable)">
            <summary>An IQueryable extension method that gets database context from the query.</summary>
            <param name="query">The query to act on.</param>
            <returns>The database context from the query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.InternalExtensions.IfDbNullThenNull(System.Object)">
            <summary>An object extension method that return null if the value is DBNull.Value.</summary>
            <param name="item">The item to act on.</param>
            <returns>Null if the value is DBNull.Value.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.InternalExtensions.GetPropertyOrFieldAccessor(System.Linq.Expressions.LambdaExpression)">
            <summary>
                A LambdaExpression extension method that gets property or field accessor.
            </summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <returns>The property or field accessor.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.InternalExtensions.GetPropertyOrFieldAccessors(System.Linq.Expressions.LambdaExpression)">
            <summary>
                Gets the property or field accessors in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>An array of property or field accessor.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.InternalExtensions.RemoveConvert(System.Linq.Expressions.Expression)">
            <summary>
                An Expression extension method that removes all convert expression from the expression.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>An Expression without convert expression.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.InternalExtensions.GetPropertyOrField(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
                An Expression extension method that gets a property or field from an expression.
            </summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="parameterExpression">The parameter @this.</param>
            <returns>The property or field from the expression.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.InternalExtensions.GetPropertyOrFieldAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
                An Expression extension method that gets a property or field access from an expression.
            </summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="parameterExpression">The parameter @this.</param>
            <returns>The property or field access from the expression.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.PropertyOrFieldAccessor.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.Reflection.MemberInfo})">
            <summary>Constructor.</summary>
            <param name="propertyOrFieldPaths">The FieldPaths.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.PropertyOrFieldAccessor.#ctor(System.Reflection.MemberInfo)">
            <summary>Constructor.</summary>
            <param name="property">The property.</param>
        </member>
        <member name="P:Z.EntityFramework.Plus.PropertyOrFieldAccessor.PropertyOrFieldPaths">
            <summary>Gets or sets the FieldPaths.</summary>
            <value>The FieldPaths.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.PropertyOrFieldAccessor.PropertyOrField">
            <summary>Gets or sets the property.</summary>
            <value>The property.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.PropertyOrFieldAccessor.GetValue(System.Object)">
            <summary>
                Gets a value.
            </summary>
            <param name="obj">The object.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.PropertyOrFieldAccessor.GetValue``1(System.Object)">
            <summary>
                Gets a value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="obj">The object.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.PropertyOrFieldAccessor.SetValue(System.Object,System.Object)">
            <summary>
                Sets a value.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.PropertyOrFieldAccessor.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.Audit">
            <summary>An audit.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.Audit._configuration">
            <summary>The lazy configuration.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.Audit.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.Audit.Entries">
            <summary>Gets or sets the entries.</summary>
            <value>The entries.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.Audit.CreatedBy">
            <summary>Gets or sets the  created by username.</summary>
            <value>The created by username.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.Audit.Configuration">
            <summary>Gets the configuration.</summary>
            <value>The configuration.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.Audit.CurrentOrDefaultConfiguration">
            <summary>Gets the current or default configuration.</summary>
            <value>The current or default configuration.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.Audit.PostSaveChanges">
            <summary>Updates audit entries after the save changes has been executed.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.Audit.PreSaveChanges(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>Adds audit entries before the save changes has been executed.</summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.Audit.AuditEntityAdded(Z.EntityFramework.Plus.Audit,Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>Audit entity added.</summary>
            <param name="audit">The audit to use to add changes made to the context.</param>
            <param name="objectStateEntry">The object state entry.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.Audit.AuditEntityAdded(Z.EntityFramework.Plus.AuditEntry,Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>Audit entity added.</summary>
            <param name="objectStateEntry">The object state entry.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.Audit.AuditEntityDeleted(Z.EntityFramework.Plus.Audit,Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>Audit entity deleted.</summary>
            <param name="audit">The audit to use to add changes made to the context.</param>
            <param name="objectStateEntry">The object state entry.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.Audit.AuditEntityDeleted(Z.EntityFramework.Plus.AuditEntry,Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>Audit entity deleted.</summary>
            <param name="objectStateEntry">The object state entry.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.Audit.AuditEntityModified(Z.EntityFramework.Plus.Audit,Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,Z.EntityFramework.Plus.AuditEntryState)">
            <summary>Audit entity modified.</summary>
            <param name="audit">The audit to use to add changes made to the context.</param>
            <param name="objectStateEntry">The object state entry.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.Audit.AuditEntityModified(Z.EntityFramework.Plus.Audit,Z.EntityFramework.Plus.AuditEntry,Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>Audit entity modified.</summary>
            <param name="objectStateEntry">The object state entry.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.Audit.PostSaveChanges(Z.EntityFramework.Plus.Audit)">
            <summary>Updates audit entries after the save changes has been executed.</summary>
            <param name="audit">The audit to use to add changes made to the context.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.Audit.PreSaveChanges(Z.EntityFramework.Plus.Audit,Microsoft.EntityFrameworkCore.DbContext)">
            <summary>Adds audit entries before the save changes has been executed.</summary>
            <param name="audit">The audit to use to add changes made to the context.</param>
            <param name="context">The context used to audits and saves all changes made.</param>
        </member>
        <member name="T:Z.EntityFramework.Plus.AuditConfiguration">
            <summary>An audit configuration.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.AuditEntryFactory">
            <summary>Gets or sets the audit entry factory.</summary>
            <value>The audit entry factory.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.AuditEntryPropertyFactory">
            <summary>Gets or sets the audit entry property factory.</summary>
            <value>The audit entry property factory.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.AutoSavePreAction">
            <summary>Gets or sets the automatic audit save pre action.</summary>
            <value>The automatic audit save pre action.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.EntityValueFormatters">
            <summary>Gets or sets a list of formatter for entity values.</summary>
            <value>A list of formatter for entity values.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.ExcludeIncludeEntityPredicates">
            <summary>Gets or sets a list of predicates to exclude or include entities.</summary>
            <value>A list of predicates to exclude or include entities.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.ExcludeIncludePropertyPredicates">
            <summary>Gets or sets a list of predicates to exclude or include properties.</summary>
            <value>A list of predicates to exclude or include properties.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.IgnoreEntityAdded">
            <summary>Gets or sets a value indicating whether the entity with Added state are audited.</summary>
            <value>true if entity with Added state are audited, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.IgnoreEntityDeleted">
            <summary>Gets or sets a value indicating whether the entity with Deleted state are audited.</summary>
            <value>true if entity with Deleted state are audited, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.IgnoreEntityModified">
            <summary>Gets or sets a value indicating whether the entity with Modified state are audited.</summary>
            <value>true if entity with Modified state are audited, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.IgnoreEntitySoftAdded">
            <summary>Gets or sets a value indicating whether the ignore entity soft added.</summary>
            <value>true if ignore entity soft added, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.IgnoreEntitySoftDeleted">
            <summary>Gets or sets a value indicating whether the ignore entity soft deleted.</summary>
            <value>true if ignore entity soft deleted, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.IgnoreRelationshipAdded">
            <summary>Gets or sets a value indicating whether the association with Added state are audited.</summary>
            <value>true if association with Added state are audited, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.IgnoreRelationshipDeleted">
            <summary>Gets or sets a value indicating whether the association with Deleted state are audited.</summary>
            <value>true if association with Deleted state are audited, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.IgnorePropertyUnchanged">
            <summary>Gets or sets a value indicating whether all unchanged property of a modified entity are audited.</summary>
            <value>true if unchanged property of a modified entity are audited, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.IsAuditedDictionary">
            <summary>Gets or sets a dictionary indicating if an entity type or a property name is audited.</summary>
            <value>A dictionary indicating if an entity type or a property name is audited.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.SoftAddedPredicates">
            <summary>Gets or sets a list of predicates to check if the modified entity is soft added.</summary>
            <value>A list of predicates to check if the modified entity is soft added.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.SoftDeletedPredicates">
            <summary>Gets or sets a list of predicates to check if the modified entity is soft deleted.</summary>
            <value>A list of predicates to check if the modified entity is soft deleted.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.ValueFormatterDictionary">
            <summary>Gets or sets a dictionary of value formatter for a property name.</summary>
            <value>A dictionary of value formatter for a property name.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditConfiguration.ExcludeRelationshipIfOneExcluded">
            <summary>
            Gets or sets a value indicating whether the exclude relationship if one excluded.
            </summary>
            <value>True if exclude relationship if one excluded, false if not.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.Clone">
            <summary>Makes a deep copy of this object.</summary>
            <returns>A copy of this object.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.Exclude(System.Func{System.Object,System.Boolean})">
            <summary>Excludes from the audit all entities which satisfy the predicate.</summary>
            <param name="excludeEntityPredicate">The exclude entity predicate.</param>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.Exclude``1">
            <summary>Excludes from the audit all entities of 'T' type or entities which the type derive from 'T'.</summary>
            <typeparam name="T">Generic type to exclude.</typeparam>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.ExcludeProperty">
            <summary>Excludes from the audit all properties.</summary>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.ExcludeProperty``1">
            <summary>
                Excludes from the audit all properties from entities of 'T' type or entities which the type
                derive from 'T'.
            </summary>
            <typeparam name="T">Generic type to exclude all properties.</typeparam>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.ExcludeProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Excludes from the audit selected properties from entities of 'T' type or entities which the
                type derive from 'T'.
            </summary>
            <typeparam name="T">Generic type to exclude selected properties.</typeparam>
            <param name="propertySelector">The property selector.</param>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.Format``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Func{System.Object,System.Object})">
            <summary>
                Formats value for selected properties from entities of 'T' type or entities which the type
                derive from 'T'.
            </summary>
            <typeparam name="T">Generic type to format selected properties.</typeparam>
            <param name="propertySelector">The property selector.</param>
            <param name="formatter">The formatter to use to format value.</param>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.FormatValue(System.Object,System.String,System.Object)">
            <summary>Format a value for the specified entry and property name.</summary>
            <param name="entry">The entry.</param>
            <param name="propertyName">The property name.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.GetEntityModifiedState(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>Gets the state of the entity modified (EntityModified, EntitySoftAdded, EntitySoftDeleted).</summary>
            <param name="entry">The entry.</param>
            <returns>The state of the entity modified (EntityModified, EntitySoftAdded, EntitySoftDeleted).</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.Include(System.Func{System.Object,System.Boolean})">
            <summary>Includes from the audit all entities which satisfy the predicate.</summary>
            <param name="includeEntityPredicate">The include entity predicate.</param>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.Include``1">
            <summary>Includes from the audit all entities of 'T' type or entities which the type derive from 'T'.</summary>
            <typeparam name="T">Generic type to include.</typeparam>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.IncludeProperty">
            <summary>Includes from the audit all properties.</summary>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.IncludeProperty``1">
            <summary>
                Includes from the audit all properties from entities of 'T' type or entities which the type
                derive from 'T'.
            </summary>
            <typeparam name="T">Generic type to include all properties.</typeparam>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.IncludeProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Includes from the audit selected properties from entities of 'T' type or entities which the
                type derive from 'T'.
            </summary>
            <typeparam name="T">Generic type to include selected properties.</typeparam>
            <param name="propertySelector">The property selector.</param>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.IsAuditedEntity(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>Checks if the entity is audited.</summary>
            <param name="entry">The entry.</param>
            <returns>true if the entity is audited, false if not.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.IsAuditedProperty(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.String)">
            <summary>Check if the property name is audited.</summary>
            <param name="entry">The entry.</param>
            <param name="propertyName">The property name.</param>
            <returns>true if the property name is audited, false if not.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.SoftAdded(System.Func{System.Object,System.Boolean})">
            <summary>
                Change from "EntityModified" to "EntitySoftAdded" for all entities which satisfy the predicate.
            </summary>
            <param name="softAddPredicate">The soft add predicate.</param>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.SoftAdded``1(System.Func{``0,System.Boolean})">
            <summary>
                Change from "EntityModified" to "EntitySoftAdded" for all entities of 'T' type or entities which the
                type derive from 'T' and which satisfy the predicate.
            </summary>
            <typeparam name="T">Generic type to soft add entity.</typeparam>
            <param name="softAddPredicate">The soft add predicate.</param>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.SoftDeleted(System.Func{System.Object,System.Boolean})">
            <summary>
                Change from "EntityModified' to "EntitySoftDeleted" for all entities which satisfy the predicate.
            </summary>
            <param name="softDeletePredicate">The soft add predicate.</param>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditConfiguration.SoftDeleted``1(System.Func{``0,System.Boolean})">
            <summary>
                Change from "EntityModified" to "EntitySoftDeleted" for all entities of 'T' type or entities which the
                type derive from 'T' and which satisfy the predicate.
            </summary>
            <typeparam name="T">Generic type to soft delete entity.</typeparam>
            <param name="softDeletePredicate">The soft delete predicate.</param>
            <returns>An AuditConfiguration.</returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.AuditEntry">
            <summary>An audit entry.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntry.AuditEntryID">
            <summary>Gets or sets the identifier of the audit entry.</summary>
            <value>The identifier of the audit entry.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntry.CreatedBy">
            <summary>Gets or sets who created this object.</summary>
            <value>Describes who created this object.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntry.CreatedDate">
            <summary>Gets or sets the the date of the changes.</summary>
            <value>The date of the changes.</value>
        </member>
        <member name="F:Z.EntityFramework.Plus.AuditEntry.DelayedKey">
            <summary>Gets or sets the delayed key.</summary>
            <value>The delayed key.</value>
        </member>
        <member name="F:Z.EntityFramework.Plus.AuditEntry.Entity">
            <summary>Gets or sets the object state entry.</summary>
            <value>The object state entry.</value>
        </member>
        <member name="F:Z.EntityFramework.Plus.AuditEntry.Entry">
            <summary>Gets or sets the object state entry.</summary>
            <value>The object state entry.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntry.EntitySetName">
            <summary>Gets or sets the name of the entity set.</summary>
            <value>The name of the entity set.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntry.EntityTypeName">
            <summary>Gets or sets the name of the entity type.</summary>
            <value>The name of the entity type.</value>
        </member>
        <member name="F:Z.EntityFramework.Plus.AuditEntry.Parent">
            <summary>Gets or sets the parent.</summary>
            <value>The parent.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntry.Properties">
            <summary>Gets or sets the properties.</summary>
            <value>The properties.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntry.State">
            <summary>Gets or sets the entry state.</summary>
            <value>The entry state.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntry.StateName">
            <summary>Gets or sets the name of the entry state.</summary>
            <value>The name of the entry state.</value>
        </member>
        <member name="T:Z.EntityFramework.Plus.AuditEntryProperty">
            <summary>An audit entry property.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntryProperty.AuditEntryPropertyID">
            <summary>Gets or sets the identifier of the audit entry property.</summary>
            <value>The identifier of the audit entry property.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntryProperty.AuditEntryID">
            <summary>Gets or sets the identifier of the audit entry.</summary>
            <value>The identifier of the audit entry.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntryProperty.Parent">
            <summary>Gets or sets the parent.</summary>
            <value>The parent.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntryProperty.PropertyName">
            <summary>Gets or sets the name of the property audited.</summary>
            <value>The name of the property audited.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntryProperty.RelationName">
            <summary>Gets or sets the name of the relation audited.</summary>
            <value>The name of the relation audited.</value>
        </member>
        <member name="F:Z.EntityFramework.Plus.AuditEntryProperty.PropertyEntry">
            <summary>Gets or sets the new value audited.</summary>
            <value>The new value audited.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntryProperty.IsValueSet">
            <summary>Gets or sets a value indicating whether OldValue and NewValue is set.</summary>
            <value>true if OldValue and NewValue is set, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntryProperty.InternalPropertyName">
            <summary>Gets or sets the name of the property internally.</summary>
            <value>The name of the property internally.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntryProperty.NewValueFormatted">
            <summary>Gets or sets the new value audited formatted.</summary>
            <value>The new value audited formatted.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditEntryProperty.OldValueFormatted">
            <summary>Gets or sets the old value audited formatted.</summary>
            <value>The old value audited formatted.</value>
        </member>
        <member name="T:Z.EntityFramework.Plus.AuditEntryState">
            <summary>Values that represent audit entry states.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.AuditEntryState.EntityAdded">
            <summary>An enum constant representing the entity added option.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.AuditEntryState.EntityDeleted">
            <summary>An enum constant representing the entity deleted option.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.AuditEntryState.EntityModified">
            <summary>An enum constant representing the entity modified option.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.AuditEntryState.EntitySoftAdded">
            <summary>An enum constant representing the entity soft added option.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.AuditEntryState.EntitySoftDeleted">
            <summary>An enum constant representing the entity soft deleted option.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.AuditEntryState.RelationshipAdded">
            <summary>An enum constant representing the relationship added option.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.AuditEntryState.RelationshipDeleted">
            <summary>An enum constant representing the relationship deleted option.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.AuditEntryState.EntityCurrent">
            <summary>An enum constant representing the entity current option.</summary>
        </member>
        <member name="T:Z.EntityFramework.Plus.AuditManager">
            <summary>Manager for audits.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditManager.#cctor">
            <summary>Static constructor.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.AuditManager.DefaultConfiguration">
            <summary>Gets or sets the default audit configuration.</summary>
            <value>The default audit configuration.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditExtensions.SaveChanges(Microsoft.EntityFrameworkCore.DbContext,Z.EntityFramework.Plus.Audit)">
            <summary>Audits and saves all changes made in this context to the underlying database.</summary>
            <param name="context">The context used to audits and saves all changes made.</param>
            <param name="audit">The audit to use to add changes made to the context.</param>
            <returns>The number of objects written to the underlying database.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditExtensions.SaveChangesAsync(Microsoft.EntityFrameworkCore.DbContext,Z.EntityFramework.Plus.Audit)">
            <summary>Asynchronously audits and saves all changes made in this context to the underlying database.</summary>
            <param name="context">The context used to audits and saves all changes made.</param>
            <param name="audit">The audit to use to add changes made to the context.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the number of objects written
                to the underlying database
            </returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.AuditExtensions.SaveChangesAsync(Microsoft.EntityFrameworkCore.DbContext,Z.EntityFramework.Plus.Audit,System.Threading.CancellationToken)">
            <summary>A DbContext extension method that saves the changes asynchronous.</summary>
            <param name="context">The context used to audits and saves all changes made.</param>
            <param name="audit">The audit to use to add changes made to the context.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the number of objects written
                to the underlying database
            </returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.BatchDelete">
            <summary>Class to batch delete.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.BatchDelete.CommandTextTemplate">
            <summary>The command text template.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.BatchDelete.CommandTextPostgreSQLTemplate">
            <summary>The command text postgre SQL template.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.BatchDelete.CommandTextTemplate_MySql">
            <summary>The command text postgre SQL template.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.BatchDelete.CommandTextWhileTemplate">
            <summary>The command text template with WHILE loop.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.BatchDelete.CommandTextWhileDelayTemplate">
            <summary>The command text template with DELAY and WHILE loop</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.BatchDelete.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchDelete.BatchSize">
            <summary>Gets or sets the size of the batch.</summary>
            <value>The size of the batch.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchDelete.BatchDelayInterval">
            <summary>Gets or sets the batch delay interval in milliseconds (The wait time between batch).</summary>
            <value>The batch delay interval in milliseconds (The wait time between batch).</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchDelete.UseTableLock">
            <summary>Gets or sets a value indicating whether the query use table lock.</summary>
            <value>True if use table lock, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchDelete.Executing">
            <summary>Gets or sets the DbCommand before being executed.</summary>
            <value>The DbCommand before being executed.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.BatchDelete.Execute``1(System.Linq.IQueryable{``0})">
            <summary>Executes the batch delete operation.</summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">The query used to execute the batch operation.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.BatchDeleteManager">
            <summary>Manage EF+ Batch Delete Configuration.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchDeleteManager.BatchDeleteBuilder">
            <summary>Gets or sets the batch delete builder to change default configuration.</summary>
            <value>The batch delete builder to change default configuration.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchDeleteManager.InMemoryDbContextFactory">
            <summary>Gets or sets the factory to create an InMemory DbContext.</summary>
            <value>The factory to create an InMemory DbContext.</value>
        </member>
        <member name="T:Z.EntityFramework.Plus.BatchDeleteVisitor">
            <summary>A batch delete visitor.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchDeleteVisitor.HasOrderBy">
            <summary>Gets or sets a value indicating whether the expression contains an OrderBy method.</summary>
            <value>true if the expression contains an OrderBy metho has order by, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchDeleteVisitor.HasSkip">
            <summary>Gets or sets a value indicating whether the expression contains an Skip method.</summary>
            <value>true if the expression contains an Skip metho has order by, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchDeleteVisitor.HasTake">
            <summary>Gets or sets a value indicating whether the expression contains an Take method.</summary>
            <value>true if the expression contains an Take metho has order by, false if not.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.BatchDeleteVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
                The modified expression, if it or any subexpression was modified; otherwise, returns the
                original expression.
            </returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.BatchDeleteExtensions.Delete``1(System.Linq.IQueryable{``0})">
            <summary>
                An IQueryable&lt;T&gt; extension method that deletes all rows from the query without
                retrieving entities.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">The query to delete rows from without retrieving entities.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.BatchDeleteExtensions.Delete``1(System.Linq.IQueryable{``0},System.Action{Z.EntityFramework.Plus.BatchDelete})">
            <summary>
                An IQueryable&lt;T&gt; extension method that deletes all rows from the query without
                retrieving entities.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">The query to delete rows from without retrieving entities.</param>
            <param name="batchDeleteBuilder">The batch builder action to change default configuration.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.BatchDeleteExtensions.DeleteAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                An IQueryable&lt;T&gt; extension method that deletes all rows asynchronously from the query
                without retrieving entities.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">The query to delete rows from without retrieving entities.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task with the number of rows affected.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.BatchDeleteExtensions.DeleteAsync``1(System.Linq.IQueryable{``0},System.Action{Z.EntityFramework.Plus.BatchDelete},System.Threading.CancellationToken)">
            <summary>
                An IQueryable&lt;T&gt; extension method that deletes all rows from the query without
                retrieving entities.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">The query to delete rows from without retrieving entities.</param>
            <param name="batchDeleteBuilder">The batch delete builder to change default configuration.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task with the number of rows affected.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheExtensions.FromCache``1(System.Linq.IQueryable{``0},Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.String[])">
            <summary>
                Return the result of the <paramref name="query" /> from the cache. If the query is not cached
                yet, the query is materialized asynchronously and cached before being returned.
            </summary>
            <typeparam name="T">The generic type of the query.</typeparam>
            <param name="query">The query to cache in the QueryCacheManager.</param>
            <param name="options">The cache entry options to use to cache the query.</param>
            <param name="tags">
                A variable-length parameters list containing tags to expire cached
                entries.
            </param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheExtensions.FromCache``1(System.Linq.IQueryable{``0},System.String[])">
            <summary>
                Return the result of the <paramref name="query" /> from the cache. If the query is not cached
                yet, the query is materialized asynchronously and cached before being returned.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="query">The query to cache in the QueryCacheManager.</param>
            <param name="tags">
                A variable-length parameters list containing tags to expire cached
                entries.
            </param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheExtensions.FromCacheAsync``1(System.Linq.IQueryable{``0},Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.Threading.CancellationToken,System.String[])">
            <summary>
                Return the result of the <paramref name="query" /> from the cache. If the query is not cached
                yet, the query is materialized and cached before being returned.
            </summary>
            <typeparam name="T">The generic type of the query.</typeparam>
            <param name="query">The query to cache in the QueryCacheManager.</param>
            <param name="options">The cache entry options to use to cache the query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="tags">
                A variable-length parameters list containing tags to expire cached
                entries.
            </param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheExtensions.FromCacheAsync``1(System.Linq.IQueryable{``0},Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.String[])">
            <summary>
                Return the result of the <paramref name="query" /> from the cache. If the query is not cached
                yet, the query is materialized and cached before being returned.
            </summary>
            <typeparam name="T">The generic type of the query.</typeparam>
            <param name="query">The query to cache in the QueryCacheManager.</param>
            <param name="options">The cache entry options to use to cache the query.</param>
            <param name="tags">
                A variable-length parameters list containing tags to expire cached
                entries.
            </param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheExtensions.FromCacheAsync``1(System.Linq.IQueryable{``0},System.String[])">
            <summary>
                Return the result of the <paramref name="query" /> from the cache if possible. Otherwise, materialize
                asynchronously the query and cache the result
                before being returned.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="query">The query to cache.</param>
            <param name="tags">
                A variable-length parameters list containing tags to expire cached
                entries.
            </param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheExtensions.FromCacheAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken,System.String[])">
            <summary>
                Return the result of the <paramref name="query" /> from the cache if possible. Otherwise,
                materialize asynchronously the query and cache the result before being returned.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="query">The query to cache.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="tags">
                A variable-length parameters list containing tags to expire cached
                entries.
            </param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheExtensions.FromCache``1(Z.EntityFramework.Plus.QueryDeferred{``0},Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.String[])">
            <summary>
                Return the result of the <paramref name="query" /> from the cache. If the query is not cached
                yet, the query is materialized asynchronously and cached before being returned.
            </summary>
            <typeparam name="T">The generic type of the query.</typeparam>
            <param name="query">The query to cache in the QueryCacheManager.</param>
            <param name="options">The cache entry options to use to cache the query.</param>
            <param name="tags">
                A variable-length parameters list containing tags to expire cached
                entries.
            </param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheExtensions.FromCache``1(Z.EntityFramework.Plus.QueryDeferred{``0},System.String[])">
            <summary>
                Return the result of the <paramref name="query" /> from the cache. If the query is not cached
                yet, the query is materialized asynchronously and cached before being returned.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="query">The query to cache in the QueryCacheManager.</param>
            <param name="tags">
                A variable-length parameters list containing tags to expire cached
                entries.
            </param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheExtensions.FromCacheAsync``1(Z.EntityFramework.Plus.QueryDeferred{``0},Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.Threading.CancellationToken,System.String[])">
            <summary>
                Return the result of the <paramref name="query" /> from the cache. If the query is not cached
                yet, the query is materialized and cached before being returned.
            </summary>
            <typeparam name="T">The generic type of the query.</typeparam>
            <param name="query">The query to cache in the QueryCacheManager.</param>
            <param name="options">The cache entry options to use to cache the query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="tags">
                A variable-length parameters list containing tags to expire cached
                entries.
            </param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheExtensions.FromCacheAsync``1(Z.EntityFramework.Plus.QueryDeferred{``0},Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.String[])">
            <summary>
                Return the result of the <paramref name="query" /> from the cache. If the query is not cached
                yet, the query is materialized and cached before being returned.
            </summary>
            <typeparam name="T">The generic type of the query.</typeparam>
            <param name="query">The query to cache in the QueryCacheManager.</param>
            <param name="options">The cache entry options to use to cache the query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="tags">
                A variable-length parameters list containing tags to expire cached
                entries.
            </param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheExtensions.FromCacheAsync``1(Z.EntityFramework.Plus.QueryDeferred{``0},System.String[])">
            <summary>
                Return the result of the <paramref name="query" /> from the cache if possible. Otherwise, materialize
                asynchronously the query and cache the result
                before being returned.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="query">The query to cache.</param>
            <param name="tags">
                A variable-length parameters list containing tags to expire cached
                entries.
            </param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheExtensions.FromCacheAsync``1(Z.EntityFramework.Plus.QueryDeferred{``0},System.Threading.CancellationToken,System.String[])">
            <summary>
                Return the result of the <paramref name="query" /> from the cache if possible. Otherwise,
                materialize asynchronously the query and cache the result before being returned.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="query">The query to cache.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="tags">
                A variable-length parameters list containing tags to expire cached
                entries.
            </param>
            <returns>The result of the query.</returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.QueryCacheManager">
            <summary>Manage EF+ Query Cache Configuration.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheManager.#cctor">
            <summary>Static constructor.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryCacheManager.Cache">
            <summary>Gets or sets the cache to use for the QueryCacheExtensions extension methods.</summary>
            <value>The cache to use for the QueryCacheExtensions extension methods.</value>
        </member>
        <member name="F:Z.EntityFramework.Plus.QueryCacheManager._defaultMemoryCacheEntryOptions">
            <summary>The default memory cache entry options.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.QueryCacheManager._memoryCacheEntryOptionsFactory">
            <summary>The memory cache entry options factory.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryCacheManager.DefaultMemoryCacheEntryOptions">
            <summary>Gets or sets the default memory cache entry options to use when no policy is specified.</summary>
            <value>The default memory cache entry options to use when no policy is specified.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryCacheManager.MemoryCacheEntryOptionsFactory">
            <summary>Gets or sets the memory cache entry options factory.</summary>
            <value>The memory cache entry options factory.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryCacheManager.CachePrefix">
            <summary>Gets or sets the cache prefix to use to create the cache key.</summary>
            <value>The cache prefix to use to create the cache key.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryCacheManager.CacheKeyFactory">
            <summary>Gets or sets the cache key factory.</summary>
            <value>The cache key factory.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryCacheManager.IncludeConnectionInCacheKey">
            <summary>
                Gets or sets a value indicating whether the connection in cache key should be included.
            </summary>
            <value>true if include connection in cache key, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryCacheManager.CacheTags">
            <summary>Gets the dictionary cache tags used to store tags and corresponding cached keys.</summary>
            <value>The cache tags used to store tags and corresponding cached keys.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryCacheManager.UseFirstTagAsCacheKey">
            <summary>
                Gets or sets a value indicating whether this object use first tag as cache key.
            </summary>
            <value>true if use first tag as cache key, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryCacheManager.UseTagsAsCacheKey">
            <summary>
                Gets or sets a value indicating whether this object use tag as cache key.
            </summary>
            <value>true if use tag as cache key, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryCacheManager.IsCommandInfoOptionalForCacheKey">
            <summary>
            Gets or sets a value indicating whether this object is command information optional for cache
            key.
            </summary>
            <value>
            True if this object is command information optional for cache key, false if not.
            </value>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheManager.AddCacheTag(System.String,System.String[])">
            <summary>Adds cache tags corresponding to a cached key in the CacheTags dictionary.</summary>
            <param name="cacheKey">The cache key.</param>
            <param name="tags">A variable-length parameters list containing tags corresponding to the <paramref name="cacheKey" />.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheManager.ExpireTag(System.String[])">
            <summary>Expire all cached keys linked to specified tags.</summary>
            <param name="tags">
                A variable-length parameters list containing tag to expire linked cache
                key.
            </param>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheManager.GetCacheKey(System.Linq.IQueryable,System.String[])">
            <summary>Gets cached keys used to cache or retrieve a query from the QueryCacheManager.</summary>
            <param name="query">The query to cache or retrieve from the QueryCacheManager.</param>
            <param name="tags">A variable-length parameters list containing tags to create the cache key.</param>
            <returns>The cache key used to cache or retrieve a query from the QueryCacheManager.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryCacheManager.GetCacheKey``1(Z.EntityFramework.Plus.QueryDeferred{``0},System.String[])">
            <summary>Gets cached keys used to cache or retrieve a query from the QueryCacheManager.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="query">The query to cache or retrieve from the QueryCacheManager.</param>
            <param name="tags">A variable-length parameters list containing tags to create the cache key.</param>
            <returns>The cache key used to cache or retrieve a query from the QueryCacheManager.</returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.BatchUpdate">
            <summary>Class to batch delete.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.BatchUpdate.CommandTextTemplate">
            <summary>The command text template.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchUpdate.Executing">
            <summary>Gets or sets the DbCommand before being executed.</summary>
            <value>The DbCommand before being executed.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchUpdate.UseTableLock">
            <summary>Gets or sets a value indicating whether the query use table lock.</summary>
            <value>True if use table lock, false if not.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.BatchUpdate.Execute``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>Executes the batch delete operation.</summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">The query used to execute the batch operation.</param>
            <param name="updateFactory">The update factory.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.BatchUpdateManager">
            <summary>Manage EF+ Batch Update Configuration.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchUpdateManager.BatchUpdateBuilder">
            <summary>Gets or sets the batch update builder to change default configuration.</summary>
            <value>The batch update builder to change default configuration.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchUpdateManager.InMemoryDbContextFactory">
            <summary>Gets or sets the factory to create an InMemory DbContext.</summary>
            <value>The factory to create an InMemory DbContext.</value>
        </member>
        <member name="T:Z.EntityFramework.Plus.BatchUpdateVisitor">
            <summary>A batch update visitor.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.BatchUpdateVisitor.HasOrderBy">
            <summary>Gets or sets a value indicating whether the expression contains an OrderBy method.</summary>
            <value>true if the expression contains an OrderBy metho has order by, false if not.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.BatchUpdateVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
                The modified expression, if it or any subexpression was modified; otherwise, returns the
                original expression.
            </returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.BatchUpdateExtensions.Update``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
                An IQueryable&lt;T&gt; extension method that updates all rows from the query using an
                expression without retrieving entities.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">The query to update rows from without retrieving entities.</param>
            <param name="updateFactory">The update expression.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.BatchUpdateExtensions.Update``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Plus.BatchUpdate})">
            <summary>
                An IQueryable&lt;T&gt; extension method that updates all rows from the query using an
                expression without retrieving entities.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">The query to update rows from without retrieving entities.</param>
            <param name="updateFactory">The update expression.</param>
            <param name="batchUpdateBuilder">The batch builder action to change default configuration.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.BatchUpdateExtensions.UpdateAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Threading.CancellationToken)">
            <summary>
                An IQueryable&lt;T&gt; extension method that updates all rows asynchronously from the query
                using an expression without retrieving entities.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">The query to update rows from without retrieving entities.</param>
            <param name="updateFactory">The update factory.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task with the number of rows affected.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.BatchUpdateExtensions.UpdateAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Plus.BatchUpdate},System.Threading.CancellationToken)">
            <summary>
                An IQueryable&lt;T&gt; extension method that updates all rows from the query using an
                expression  without retrieving entities.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">The query to update rows from without retrieving entities.</param>
            <param name="updateFactory">The update factory.</param>
            <param name="batchUpdateBuilder">The batch delete builder to change default configuration.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task with the number of rows affected.</returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.QueryDeferred`1">
            <summary>A class to store immediate LINQ IQueryable query and expression deferred.</summary>
            <typeparam name="TResult">Type of the result of the query deferred.</typeparam>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryDeferred`1.#ctor(System.Linq.IQueryable,System.Linq.Expressions.Expression)">
            <summary>Constructor.</summary>
            <param name="query">The deferred query.</param>
            <param name="expression">The deferred expression.</param>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryDeferred`1.Expression">
            <summary>Gets or sets the deferred expression.</summary>
            <value>The deferred expression.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryDeferred`1.Query">
            <summary>Gets or sets the deferred query.</summary>
            <value>The deferred query.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryDeferred`1.Execute">
            <summary>Execute the deferred expression and return the result.</summary>
            <returns>The result of the deferred expression executed.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryDeferred`1.ExecuteAsync">
            <summary>Execute asynchrounously the deferred expression and return the result.</summary>
            <returns>The result of the deferred expression executed asynchrounously.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryDeferred`1.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>Execute asynchrounously the deferred expression and return the result.</summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of the deferred expression executed asynchrounously.</returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.BaseQueryFilter">
            <summary>A base class for query filter.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.BaseQueryFilter.ElementType">
            <summary>Gets or sets the type of the filter element.</summary>
            <value>The type of the filter element.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BaseQueryFilter.IsDefaultEnabled">
            <summary>Gets or sets a value indicating whether the filter is enabled by default.</summary>
            <value>true if the filter is enabled by default, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BaseQueryFilter.OwnerFilterContext">
            <summary>Gets or sets the filter context that owns this filter.</summary>
            <value>The filter context that owns this filter.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFilter.ApplyFilter``1(System.Object)">
            <summary>Apply the filter on the query and return the new filtered query.</summary>
            <param name="query">The query to filter.</param>
            <returns>The new query filered query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFilter.Disable">
            <summary>Disables this filter.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFilter.Disable``1">
            <summary>Disables this filter on the speficied type.</summary>
            <typeparam name="TType">Type of the element to disable the filter on.</typeparam>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFilter.Disable(System.Type[])">
            <summary>Disable this filter on the specified types.</summary>
            <param name="types">A variable-length parameters list containing types to disable the filter on.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFilter.Enable">
            <summary>Enables this filter.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFilter.Enable``1">
            <summary>Enables this filter on the speficied type.</summary>
            <typeparam name="TType">Type of the element to enable the filter on.</typeparam>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFilter.Enable(System.Type[])">
            <summary>Enables this filter on the specified types.</summary>
            <param name="types">A variable-length parameters list containing types to enable the filter on.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFilter.GetFilter">
            <summary>Gets the filter.</summary>
            <returns>The filter.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFilter.Clone(Z.EntityFramework.Plus.QueryFilterContext)">
            <summary>Makes a deep copy of this filter.</summary>
            <param name="filterContext">The filter context that owns the filter copy.</param>
            <returns>A copy of this filter.</returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.BaseQueryFilterQueryable">
            <summary>A base class for query filter queryable.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.BaseQueryFilterQueryable.Context">
            <summary>Gets or sets the context associated to the filter queryable.</summary>
            <value>The context associated to the filter queryable.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BaseQueryFilterQueryable.Filters">
            <summary>Gets or sets the filters used by the filter queryable.</summary>
            <value>The filters used by the filter queryable.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BaseQueryFilterQueryable.FilterSet">
            <summary>Gets or sets the filter set associated with the filter queryable.</summary>
            <value>The filter set associated with the filter queryable.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BaseQueryFilterQueryable.OriginalQuery">
            <summary>Gets or sets the original query.</summary>
            <value>The original query.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFilterQueryable.DisableFilter(Z.EntityFramework.Plus.BaseQueryFilter)">
            <summary>Disables the filter on the associated query.</summary>
            <param name="filter">The filter to disable on the associated query.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFilterQueryable.EnableFilter(Z.EntityFramework.Plus.BaseQueryFilter)">
            <summary>Enables the filter on the associated query.</summary>
            <param name="filter">The filter to enable on the associated query.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFilterQueryable.UpdateInternalQuery">
            <summary>Updates the internal query.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterExtensions.Filter(Microsoft.EntityFrameworkCore.DbContext,System.Object)">
            <summary>Gets the filter associated with the specified key from the context.</summary>
            <param name="context">The context filtered.</param>
            <param name="key">The filter key associated to the filter.</param>
            <returns>The filter associated with the specified key from the context.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterExtensions.Filter``1(Microsoft.EntityFrameworkCore.DbContext,System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}},System.Boolean)">
            <summary>
                Creates and return a filter added for the context.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="context">The context to filter.</param>
            <param name="queryFilter">The query filter to apply to the the context.</param>
            <param name="isEnabled">true if the filter is enabled.</param>
            <returns>The filter created and added to the the context.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterExtensions.Filter``1(Microsoft.EntityFrameworkCore.DbContext,System.Object,System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}},System.Boolean)">
            <summary>
                Creates and return a filter associated with the specified key added for the context.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="context">The context filtered.</param>
            <param name="key">The filter key associated to the filter.</param>
            <param name="queryFilter">The query filter to apply to the the context.</param>
            <param name="isEnabled">true if the filter is enabled.</param>
            <returns>The filter created and added to the the context.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterExtensions.AsNoFilter``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>Return the orginal query before the context was filtered.</summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">The filtered query from which the original query should be retrieved.</param>
            <returns>The orginal query before the context was filtered.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterExtensions.Filter``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Object[])">
            <summary>
                Filter the query using context filters associated with specified keys.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">The query to filter using context filters associated with specified keys.</param>
            <param name="keys">
                A variable-length parameters list containing keys associated to context filters to use to filter the
                query.
            </param>
            <returns>The query filtered using context filters associated with specified keys.</returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.QueryFilter`1">
            <summary>A class for query filter.</summary>
            <typeparam name="T">The type of the filter element.</typeparam>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilter`1.#ctor(Z.EntityFramework.Plus.QueryFilterContext,System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}})">
            <summary>Constructor.</summary>
            <param name="ownerFilterContext">The context that owns his filter.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilter`1.Filter">
            <summary>Gets or sets the filter.</summary>
            <value>The filter.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilter`1.ApplyFilter``1(System.Object)">
            <summary>Apply the filter on the query and return the new filtered query.</summary>
            <param name="query">The query to filter.</param>
            <returns>The new query filered query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilter`1.GetFilter">
            <summary>Gets the filter.</summary>
            <returns>The filter.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilter`1.Clone(Z.EntityFramework.Plus.QueryFilterContext)">
            <summary>Makes a deep copy of this filter.</summary>
            <param name="filterContext">The filter context that owns the filter copy.</param>
            <returns>A copy of this filter.</returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.QueryFilterContext">
            <summary>A class for query filter context.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterContext.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>Constructor.</summary>
            <param name="context">The context associated to the filter context.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterContext.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Boolean)">
            <summary>Create a new QueryFilterContext.</summary>
            <param name="context">The context associated to the filter context.</param>
            <param name="isGenericContext">true if this filter context is the generic context used by other filter context.</param>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterContext.Context">
            <summary>Gets or sets the context associated with the filter context.</summary>
            <value>The context associated with the filter context.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterContext.Filters">
            <summary>Gets or sets the filters.</summary>
            <value>The filters.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterContext.FilterSetByType">
            <summary>Gets or sets filter set by type.</summary>
            <value>The filter set by type.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterContext.FilterSets">
            <summary>Gets or sets filter sets.</summary>
            <value>The filter sets.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterContext.AddFilter``1(System.Object,System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>Adds a query filter to the filter context associated with the specified key.</summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="key">The filter key.</param>
            <param name="filter">The filter.</param>
            <returns>The query filter added to the filter context associated with the specified ke .</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterContext.ApplyFilter``1(System.Linq.IQueryable{``0})">
            <summary>Filter the query using context filters associated with specified keys.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="query">The query to filter using context filters associated with specified keys.</param>
            <returns>The query filtered using context filters associated with specified keys.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterContext.ApplyFilter``1(System.Linq.IQueryable{``0},System.Object[])">
            <summary>Filter the query using context filters associated with specified keys.</summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">The query to filter using context filters associated with specified keys.</param>
            <param name="keys">
                A variable-length parameters list containing keys associated to context
                filters to use to filter the query.
            </param>
            <returns>The query filtered using context filters associated with specified keys.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterContext.DisableFilter(Z.EntityFramework.Plus.BaseQueryFilter,System.Type[])">
            <summary>Disable this filter on the specified types.</summary>
            <param name="filter">The filter to disable.</param>
            <param name="types">A variable-length parameters list containing types to disable the filter on.</param>
            m>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterContext.EnableFilter(Z.EntityFramework.Plus.BaseQueryFilter,System.Type[])">
            <summary>Enables this filter on the specified types.</summary>
            <param name="filter">The filter to enable.</param>
            <param name="types">A variable-length parameters list containing types to enable the filter on.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterContext.GetFilter(System.Object)">
            <summary>Gets the filter associated to the specified key.</summary>
            <param name="key">The filter key.</param>
            <returns>The filter associated to the specified key.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterContext.LoadGenericContextInfo(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>Load context information to the generic context.</summary>
            <param name="context">The context to use to load information to the generic context.</param>
        </member>
        <member name="T:Z.EntityFramework.Plus.QueryFilterManager">
            <summary>A class to manage query filter options.</summary>
        </member>
        <member name="F:Z.EntityFramework.Plus.QueryFilterManager.GenericFilterContextLock">
            <summary>The generic filter context lock.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterManager.#cctor">
            <summary>Static constructor.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterManager.ForceCast">
            <summary>Gets or sets if the method cast should be forced.</summary>
            <value>True if the method cast should be forced, otherwise false.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterManager.GlobalFilters">
            <summary>Gets the global filters.</summary>
            <value>The global filters.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterManager.GlobalInitializeFilterActions">
            <summary>Gets or sets the global initialize filter actions.</summary>
            <value>The global initialize filter actions.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterManager.CacheGenericFilterContext">
            <summary>Gets or sets the dictionary containing generic filter context information for a DbContext.FullName.</summary>
            <value>The dictionary containing generic filter context information for a DbContext.FullName.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterManager.CacheWeakFilterContext">
            <summary>Gets or sets the weak table containing filter context for a specified context.</summary>
            <value>The weak table containing filter context for a specified context.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterManager.CacheWeakFilterQueryable">
            <summary>Gets or sets the weak table containing filter queryable for a specified query.</summary>
            <value>The weak table containing filter queryable for a specified query.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterManager.AddOrGetGenericFilterContext(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>Adds or gets the generic filter context associated with the context.</summary>
            <param name="context">The context associated to the filter context.</param>
            <returns>The generic filter context associated with the context.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterManager.AddOrGetFilterContext(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>Adds or get the filter context associated with the context.</summary>
            <param name="context">The context associated with the filter context.</param>
            <returns>The filter context associated with the context.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterManager.GetFilterQueryable(System.Linq.IQueryable)">
            <summary>Gets the filter queryable associated with the query.</summary>
            <param name="query">The query associated with the filter queryable.</param>
            <returns>The filter queryable associated with the query.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterManager.Filter(System.Object)">
            <summary>Gets the filter associated with the specified key from the context.</summary>
            <param name="key">The filter key associated to the filter.</param>
            <returns>The filter associated with the specified key from the context.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterManager.Filter``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}},System.Boolean)">
            <summary>
                Creates and return a filter added for the context.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="queryFilter">The query filter to apply to the the context.</param>
            <param name="isEnabled">true if the filter is enabled.</param>
            <returns>The filter created and added to the the context.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterManager.Filter``1(System.Object,System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}},System.Boolean)">
            <summary>
                Creates and return a filter associated with the specified key added for the context.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="key">The filter key associated to the filter.</param>
            <param name="queryFilter">The query filter to apply to the the context.</param>
            <param name="isEnabled">true if the filter is enabled.</param>
            <returns>The filter created and added to the the context.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterManager.InitilizeGlobalFilter(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>Initilize global filter in the context.</summary>
            <param name="context">The context to initialize global filter on.</param>
        </member>
        <member name="T:Z.EntityFramework.Plus.QueryFilterQueryable`1">
            <summary>A class for query filter queryable.</summary>
            <typeparam name="T">The type of elements of the filter queryable.</typeparam>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterQueryable`1.#ctor(Microsoft.EntityFrameworkCore.DbContext,Z.EntityFramework.Plus.QueryFilterSet,System.Linq.IQueryable{`0})">
            <summary>Constructor.</summary>
            <param name="context">The context associated to the filter queryable.</param>
            <param name="filterSet">The filter set associated with the filter queryable.</param>
            <param name="originalQuery">The original query.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterQueryable`1.UpdateInternalQuery">
            <summary>Updates the internal query.</summary>
        </member>
        <member name="T:Z.EntityFramework.Plus.QueryFilterSet">
            <summary>A class for query filter set.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterSet.#ctor(System.Reflection.PropertyInfo)">
            <summary>Constructor.</summary>
            <param name="dbSetProperty">The database set property.</param>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterSet.CreateFilterQueryableCompiled">
            <summary>Gets or sets the compiled function to create a new filter queryable.</summary>
            <value>The compiled function to create a new filter queryable.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterSet.DbSetProperty">
            <summary>Gets or sets the database set property.</summary>
            <value>The database set property.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterSet.ElementType">
            <summary>Gets or sets the type of the element.</summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterSet.GetDbSetCompiled">
            <summary>Gets or sets the compiled function to retrieve the DbSet from the DbContext.</summary>
            <value>The compiled function to retrieve the DbSet from the DbContext.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFilterSet.UpdateInternalQueryCompiled">
            <summary>Gets or sets the compiled action to update the internal query.</summary>
            <value>The compiled action to update the internal query.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterSet.AddOrGetFilterQueryable(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>Gets or sets the compiled action to update the internal query.</summary>
            <value>The compiled action to update the internal query.</value>
            <summary>Adds an or get a filter queryable from the context.</summary>
            <param name="context">The context to add or get a filter queryable.</param>
            <returns>the filter queryable fromt the context.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterSet.CompileCreateFilterQueryable">
            <summary>Compiles the function to create a new filter queryable.</summary>
            <returns>The compiled the function to create a new filter queryable</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterSet.CompileGetDbSet(System.Reflection.PropertyInfo)">
            <summary>Compiles the function to retrieve the DbSet from the DbContext.</summary>
            <param name="dbSetProperty">The database set property.</param>
            <returns>The compiled the function to retrieve the DbSet from the DbContext.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFilterSet.UpdateInternalQuery(Microsoft.EntityFrameworkCore.DbContext,System.Object)">
            <summary>Compile the action to update the internal query.</summary>
            <param name="context">The context to update the query from.</param>
            <param name="query">The query to change the internal query.</param>
        </member>
        <member name="T:Z.EntityFramework.Plus.BaseQueryFuture">
            <summary>Interace for QueryFuture class.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.BaseQueryFuture.HasValue">
            <summary>Gets the value indicating whether the query future has a value.</summary>
            <value>true if this query future has a value, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BaseQueryFuture.OwnerBatch">
            <summary>Gets or sets the batch that owns the query future.</summary>
            <value>The batch that owns the query future.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BaseQueryFuture.Query">
            <summary>Gets or sets the query deferred.</summary>
            <value>The query deferred.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BaseQueryFuture.QueryExecutor">
            <summary>Gets or sets the query deferred executor.</summary>
            <value>The query deferred executor.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BaseQueryFuture.QueryContext">
            <summary>Gets or sets a context for the query deferred.</summary>
            <value>The query deferred context.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.BaseQueryFuture.QueryConnection">
            <summary>Gets or sets the query connection.</summary>
            <value>The query connection.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFuture.CreateExecutorAndGetCommand(Microsoft.EntityFrameworkCore.Query.RelationalQueryContext@)">
            <summary>Creates executor and get command.</summary>
            <returns>The new executor and get command.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFuture.SetResult(System.Data.Common.DbDataReader)">
            <summary>Sets the result of the query deferred.</summary>
            <param name="reader">The reader returned from the query execution.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.BaseQueryFuture.GetQueryEnumerator``1(System.Data.Common.DbDataReader)">
            <summary>Sets the result of the query deferred.</summary>
            <param name="reader">The reader returned from the query execution.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureExtensions.Future``1(System.Linq.IQueryable{``0})">
            <summary>
                Defer the execution of the <paramref name="query" /> and batch the query command with other
                future queries. The batch is executed when a future query requires a database round trip.
            </summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
            <param name="query">
                The query to defer the execution of and to add in the batch of future
                queries.
            </param>
            <returns>
                The QueryFutureEnumerable&lt;TEntity&gt; added to the batch of futures queries.
            </returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureExtensions.FutureValue``1(System.Linq.IQueryable{``0})">
            <summary>
                Defer the execution of the <paramref name="query" /> and batch the query command with other
                future queries. The batch is executed when a future query requires a database round trip.
            </summary>
            <typeparam name="TResult">The type of the query result.</typeparam>
            <param name="query">
                The query to defer the execution of and to add in the batch of future
                queries.
            </param>
            <returns>
                The QueryFutureValue&lt;TResult,TResult&gt; added to the batch of futures queries.
            </returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureExtensions.FutureValue``1(Z.EntityFramework.Plus.QueryDeferred{``0})">
            <summary>
                Defer the execution of the <paramref name="query" /> and batch the query command with other
                future queries. The batch is executed when a future query requires a database round trip.
            </summary>
            <typeparam name="TResult">The type of the query result.</typeparam>
            <param name="query">The query to defer the execution and to add in the batch of future queries.</param>
            <returns>
                The QueryFutureValue&lt;TResult,TResult&gt; added to the batch of futures queries.
            </returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.QueryFutureBatch">
            <summary>Class to own future queries in a batch</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureBatch.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>Constructor.</summary>
            <param name="context">The context related to the query future batched.</param>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFutureBatch.Context">
            <summary>Gets or sets the context related to the query future batched.</summary>
            <value>The context related to the query future batched.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFutureBatch.Queries">
            <summary>Gets or sets deferred query lists waiting to be executed.</summary>
            <value>The deferred queries list waiting to be executed.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureBatch.ExecuteQueries">
            <summary>Executes deferred query lists.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureBatch.ExecuteQueriesAsync">
            <summary>Executes deferred query lists.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureBatch.CreateCommandCombined">
            <summary>Creates a new command combining deferred queries.</summary>
            <returns>The combined command created from deferred queries.</returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.QueryFutureEnumerable`1">
            <summary>Class for query future value.</summary>
            <typeparam name="T">The type of elements of the query.</typeparam>
        </member>
        <member name="F:Z.EntityFramework.Plus.QueryFutureEnumerable`1._result">
            <summary>The result of the query future.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureEnumerable`1.#ctor(Z.EntityFramework.Plus.QueryFutureBatch,System.Linq.IQueryable)">
            <summary>Constructor.</summary>
            <param name="ownerBatch">The batch that owns this item.</param>
            <param name="query">
                The query to defer the execution and to add in the batch of future
                queries.
            </param>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureEnumerable`1.GetEnumerator">
            <summary>Gets the enumerator of the query future.</summary>
            <returns>The enumerator of the query future.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets the enumerator of the query future.</summary>
            <returns>The enumerator of the query future.</returns>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureEnumerable`1.SetResult(System.Data.Common.DbDataReader)">
            <summary>Sets the result of the query deferred.</summary>
            <param name="reader">The reader returned from the query execution.</param>
        </member>
        <member name="T:Z.EntityFramework.Plus.QueryFutureManager">
            <summary>Manage EF+ Query Future Configuration.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureManager.#cctor">
            <summary>Static constructor.</summary>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFutureManager.AllowQueryBatch">
            <summary>Gets or sets a value indicating whether we allow query batch.</summary>
            <value>True if allow query batch, false if not.</value>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFutureManager.CacheWeakFutureBatch">
            <summary>Gets or sets the weak table used to cache future batch associated to a context.</summary>
            <value>The weak table used to cache future batch associated to a context.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureManager.AddOrGetBatch(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>Adds or gets the future batch associated to the context.</summary>
            <param name="context">The context used to cache the future batch.</param>
            <returns>The future batch associated to the context.</returns>
        </member>
        <member name="T:Z.EntityFramework.Plus.QueryFutureValue`1">
            <summary>Class for query future value.</summary>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="F:Z.EntityFramework.Plus.QueryFutureValue`1._result">
            <summary>The result of the query future.</summary>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureValue`1.#ctor(Z.EntityFramework.Plus.QueryFutureBatch,System.Linq.IQueryable)">
            <summary>Constructor.</summary>
            <param name="ownerBatch">The batch that owns this item.</param>
            <param name="query">
                The query to defer the execution and to add in the batch of future
                queries.
            </param>
        </member>
        <member name="P:Z.EntityFramework.Plus.QueryFutureValue`1.Value">
            <summary>Gets the value of the future query.</summary>
            <value>The value of the future query.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureValue`1.ValueAsync">
            <summary>Gets the value of the future query.</summary>
            <value>The value of the future query.</value>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureValue`1.SetResult(System.Data.Common.DbDataReader)">
            <summary>Sets the result of the query deferred.</summary>
            <param name="reader">The reader returned from the query execution.</param>
        </member>
        <member name="M:Z.EntityFramework.Plus.QueryFutureValue`1.op_Implicit(Z.EntityFramework.Plus.QueryFutureValue{`0})~`0">
            <summary>
            Performs an implicit conversion from QueryFutureValue to TResult.
            </summary>
            <param name="futureValue">The future value.</param>
            <returns>The result of forcing this lazy value.</returns>
        </member>
    </members>
</doc>
