<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EFSecondLevelCache.Core</name>
    </assembly>
    <members>
        <member name="T:EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo">
            <summary>
            Stores the debug information of the caching process.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo.EFCacheKey">
            <summary>
            Stores information of the computed key of the input LINQ query.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo.IsCacheHit">
            <summary>
            Determines this query is using the 2nd level cache or not.
            </summary>
        </member>
        <member name="T:EFSecondLevelCache.Core.Contracts.EFCacheKey">
            <summary>
            Stores information of the computed key of the input LINQ query.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.Contracts.EFCacheKey.Key">
            <summary>
            The computed key of the input LINQ query.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.Contracts.EFCacheKey.KeyHash">
            <summary>
            Hash of the input LINQ query's computed key.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.Contracts.EFCacheKey.CacheDependencies">
            <summary>
            Determines which entities are used in this LINQ query.
            This array will be used to invalidate the related cache of all related queries automatically.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.Contracts.EFCacheKey.#ctor">
            <summary>
            Stores information of the computed key of the input LINQ query.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.Contracts.EFCacheKey.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.Contracts.EFCacheKey.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="T:EFSecondLevelCache.Core.Contracts.EFQueryDebugView">
            <summary>
            Expression and its Dependencies
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.Contracts.EFQueryDebugView.Types">
            <summary>
             Dependency items.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.Contracts.EFQueryDebugView.DebugView">
            <summary>
            Expression to a readable string.
            </summary>
        </member>
        <member name="T:EFSecondLevelCache.Core.Contracts.IEFCacheKeyHashProvider">
            <summary>
            The CacheKey Hash Provider Contract.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.Contracts.IEFCacheKeyHashProvider.ComputeHash(System.String)">
            <summary>
            Computes the unique hash of the input.
            </summary>
            <param name="data">the input data to hash</param>
            <returns>Hashed data</returns>
        </member>
        <member name="T:EFSecondLevelCache.Core.Contracts.IEFCacheKeyProvider">
            <summary>
            CacheKeyProvider Contract.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.Contracts.IEFCacheKeyProvider.GetEFCacheKey``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression,System.String)">
            <summary>
            Gets an EF query and returns its hash to store in the cache.
            </summary>
            <typeparam name="T">Type of the entity</typeparam>
            <param name="query">The EF query.</param>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <param name="saltKey">If you think the computed hash of the query is not enough, set this value.</param>
            <returns>Information of the computed key of the input LINQ query.</returns>
        </member>
        <member name="T:EFSecondLevelCache.Core.Contracts.IEFCacheServiceProvider">
            <summary>
            Cache Service Provider Contract.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.Contracts.IEFCacheServiceProvider.ClearAllCachedEntries">
            <summary>
            Removes the cached entries added by this library.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.Contracts.IEFCacheServiceProvider.GetValue(System.String)">
            <summary>
            Gets a cached entry by key.
            </summary>
            <param name="cacheKey">key to find</param>
            <returns>cached value</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.Contracts.IEFCacheServiceProvider.InsertValue(System.String,System.Object,System.Collections.Generic.ISet{System.String})">
            <summary>
            Adds a new item to the cache.
            </summary>
            <param name="cacheKey">key</param>
            <param name="value">value</param>
            <param name="rootCacheKeys">cache dependencies</param>
        </member>
        <member name="M:EFSecondLevelCache.Core.Contracts.IEFCacheServiceProvider.InvalidateCacheDependencies(System.String[])">
            <summary>
            Invalidates all of the cache entries which are dependent on any of the specified root keys.
            </summary>
            <param name="rootCacheKeys">cache dependencies</param>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFApplicationBuilderExtensions">
            <summary>
            Application Builder Extensions
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFApplicationBuilderExtensions.UseEFSecondLevelCache(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Enables EFSecondLevelCache.Core to access ApplicationServices.
            </summary>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFAsyncEnumerable`1">
            <summary>
            Asynchronous version of the IEnumerable interface, allowing elements of the enumerable sequence to be retrieved asynchronously.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFAsyncEnumerable`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Asynchronous version of the IEnumerable interface
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFAsyncEnumerable`1.GetEnumerator">
            <summary>
            Gets an asynchronous enumerator over the sequence.
            </summary>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFAsyncEnumerator`1">
            <summary>
            Asynchronous version of the IEnumerator of T interface that allows elements to be retrieved asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFAsyncEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Asynchronous version of the IEnumerator of T interface that allows elements to be retrieved asynchronously.
            </summary>
            <param name="inner">The inner IEnumerator</param>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFAsyncEnumerator`1.Current">
            <summary>
            Gets the current element in the iteration.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFAsyncEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFAsyncEnumerator`1.MoveNext(System.Threading.CancellationToken)">
            <summary>
            Advances the enumerator to the next element in the sequence, returning the result asynchronously.
            </summary>
            <param name="cancellationToken">A System.Threading.CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the sequence.</returns>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFAsyncTaskEnumerable`1">
            <summary>
            Asynchronous version of the IEnumerable interface, allowing elements of the enumerable sequence to be retrieved asynchronously.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFAsyncTaskEnumerable`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Asynchronous version of the IEnumerable interface.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFAsyncTaskEnumerable`1.GetEnumerator">
            <summary>
            Gets an asynchronous enumerator over the sequence.
            </summary>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFAsyncTaskEnumerator`1">
            <summary>
            Asynchronous version of the IEnumerator interface, allowing elements to be retrieved asynchronously.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFAsyncTaskEnumerator`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Asynchronous version of the IEnumerator interface
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFAsyncTaskEnumerator`1.Current">
            <summary>
            Gets the current element in the iteration.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFAsyncTaskEnumerator`1.System#IDisposable#Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFAsyncTaskEnumerator`1.MoveNext(System.Threading.CancellationToken)">
            <summary>
            Advances the enumerator to the next element in the sequence, returning the result asynchronously.
            </summary>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFCachedDbSet`1">
            <summary>
            Provides functionality to evaluate queries against a specific data source.
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedDbSet`1.#ctor(Microsoft.EntityFrameworkCore.DbSet{`0},System.String,EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo,EFSecondLevelCache.Core.Contracts.IEFCacheKeyProvider,EFSecondLevelCache.Core.Contracts.IEFCacheServiceProvider)">
            <summary>
            Provides functionality to evaluate queries against a specific data source.
            </summary>
            <param name="query">The input EF query.</param>
            <param name="saltKey">If you think the computed hash of the query is not enough, set this value.</param>
            <param name="debugInfo">Stores the debug information of the caching process.</param>
            <param name="cacheKeyProvider">Gets an EF query and returns its hash to store in the cache.</param>
            <param name="cacheServiceProvider">Cache Service Provider.</param>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedDbSet`1.AsyncEnumerable">
            <summary>
            Asynchronous version of the IEnumerable interface
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedDbSet`1.CacheKeyProvider">
            <summary>
            Gets an EF query and returns its hash to store in the cache.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedDbSet`1.CacheServiceProvider">
            <summary>
            Cache Service Provider.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedDbSet`1.DebugInfo">
            <summary>
            Stores the debug information of the caching process.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedDbSet`1.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of System.Linq.IQueryable is executed.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedDbSet`1.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of System.Linq.IQueryable.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedDbSet`1.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedDbSet`1.Query">
            <summary>
            The input EF query.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedDbSet`1.SaltKey">
            <summary>
            If you think the computed hash of the query is not enough, set this value.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedDbSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A collections that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedDbSet`1.System#Collections#Generic#IEnumerable{TType}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A collections that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFCachedDbSetExtensions">
            <summary>
             DbSet Extensions
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedDbSetExtensions.Find``1(EFSecondLevelCache.Core.EFCachedDbSet{``0},System.Object[])">
            <summary>
            Finds an entity with the given primary key values.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedDbSetExtensions.FindAsync``1(EFSecondLevelCache.Core.EFCachedDbSet{``0},System.Object[],System.Threading.CancellationToken)">
            <summary>
            Finds an entity with the given primary key values.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedDbSetExtensions.FindAsync``1(EFSecondLevelCache.Core.EFCachedDbSet{``0},System.Object[])">
            <summary>
            Finds an entity with the given primary key values.
            </summary>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFCachedQueryable`1">
            <summary>
            Provides functionality to evaluate queries against a specific data source.
            </summary>
            <typeparam name="TType">Type of the entity.</typeparam>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryable`1.#ctor(System.Linq.IQueryable{`0},System.String,EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo,EFSecondLevelCache.Core.Contracts.IEFCacheKeyProvider,EFSecondLevelCache.Core.Contracts.IEFCacheServiceProvider)">
            <summary>
            Provides functionality to evaluate queries against a specific data source.
            </summary>
            <param name="query">The input EF query.</param>
            <param name="saltKey">If you think the computed hash of the query is not enough, set this value.</param>
            <param name="debugInfo">Stores the debug information of the caching process.</param>
            <param name="cacheKeyProvider">Gets an EF query and returns its hash to store in the cache.</param>
            <param name="cacheServiceProvider">Cache Service Provider.</param>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedQueryable`1.AsyncEnumerable">
            <summary>
            Asynchronous version of the IEnumerable interface
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedQueryable`1.CacheKeyProvider">
            <summary>
            Gets an EF query and returns its hash to store in the cache.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedQueryable`1.CacheServiceProvider">
            <summary>
            Cache Service Provider.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedQueryable`1.DebugInfo">
            <summary>
            Stores the debug information of the caching process.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedQueryable`1.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of System.Linq.IQueryable is executed.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedQueryable`1.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of System.Linq.IQueryable.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedQueryable`1.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedQueryable`1.Query">
            <summary>
            The input EF query.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFCachedQueryable`1.SaltKey">
            <summary>
            If you think the computed hash of the query is not enough, set this value.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A collections that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryable`1.System#Collections#Generic#IEnumerable{TType}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A collections that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFCachedQueryExtensions">
            <summary>
            Returns a new cached query.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(System.Linq.IQueryable{``0},System.String,EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo,EFSecondLevelCache.Core.Contracts.IEFCacheKeyProvider,EFSecondLevelCache.Core.Contracts.IEFCacheServiceProvider)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="saltKey">If you think the computed hash of the query is not enough, set this value.</param>
            <param name="debugInfo">Stores the debug information of the caching process.</param>
            <param name="cacheKeyProvider">Gets an EF query and returns its hash to store in the cache.</param>
            <param name="cacheServiceProvider">Cache Service Provider.</param>
            <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.String,EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo,EFSecondLevelCache.Core.Contracts.IEFCacheKeyProvider,EFSecondLevelCache.Core.Contracts.IEFCacheServiceProvider)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="saltKey">If you think the computed hash of the query is not enough, set this value.</param>
            <param name="debugInfo">Stores the debug information of the caching process.</param>
            <param name="cacheKeyProvider">Gets an EF query and returns its hash to store in the cache.</param>
            <param name="cacheServiceProvider">Cache Service Provider.</param>
            <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(System.Linq.IQueryable{``0},System.String,EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo,System.IServiceProvider)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="saltKey">If you think the computed hash of the query is not enough, set this value.</param>
            <param name="debugInfo">Stores the debug information of the caching process.</param>
            <param name="serviceProvider">Defines a mechanism for retrieving a service object.</param>
            <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.String,EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo,System.IServiceProvider)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="saltKey">If you think the computed hash of the query is not enough, set this value.</param>
            <param name="debugInfo">Stores the debug information of the caching process.</param>
            <param name="serviceProvider">Defines a mechanism for retrieving a service object.</param>
            <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(System.Linq.IQueryable{``0},EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo,System.IServiceProvider)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="debugInfo">Stores the debug information of the caching process.</param>
            <param name="serviceProvider">Defines a mechanism for retrieving a service object.</param>
            <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0},EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo,System.IServiceProvider)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="debugInfo">Stores the debug information of the caching process.</param>
            <param name="serviceProvider">Defines a mechanism for retrieving a service object.</param>
            <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(System.Linq.IQueryable{``0},System.IServiceProvider)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="serviceProvider">Defines a mechanism for retrieving a service object.</param>
            <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.IServiceProvider)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="serviceProvider">Defines a mechanism for retrieving a service object.</param>
            <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(System.Linq.IQueryable{``0},System.String,EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            Please add `AddEFSecondLevelCache` method to `IServiceCollection` and also add `UseEFSecondLevelCache` method to `IApplicationBuilder` before using this method.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="saltKey">If you think the computed hash of the query is not enough, set this value.</param>
            <param name="debugInfo">Stores the debug information of the caching process.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.String,EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            Please add `AddEFSecondLevelCache` method to `IServiceCollection` and also add `UseEFSecondLevelCache` method to `IApplicationBuilder` before using this method.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="saltKey">If you think the computed hash of the query is not enough, set this value.</param>
            <param name="debugInfo">Stores the debug information of the caching process.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            Please add `AddEFSecondLevelCache` method to `IServiceCollection` and also add `UseEFSecondLevelCache` method to `IApplicationBuilder` before using this method.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            Please add `AddEFSecondLevelCache` method to `IServiceCollection` and also add `UseEFSecondLevelCache` method to `IApplicationBuilder` before using this method.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(System.Linq.IQueryable{``0},EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            Please add `AddEFSecondLevelCache` method to `IServiceCollection` and also add `UseEFSecondLevelCache` method to `IApplicationBuilder` before using this method.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="debugInfo">Stores the debug information of the caching process.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0},EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            Please add `AddEFSecondLevelCache` method to `IServiceCollection` and also add `UseEFSecondLevelCache` method to `IApplicationBuilder` before using this method.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="debugInfo">Stores the debug information of the caching process.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            Please add `AddEFSecondLevelCache` method to `IServiceCollection` and also add `UseEFSecondLevelCache` method to `IApplicationBuilder` before using this method.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="saltKey">If you think the computed hash of the query is not enough, set this value.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryExtensions.Cacheable``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.String)">
            <summary>
            Returns a new query where the entities returned will be cached in the IEFCacheServiceProvider.
            Please add `AddEFSecondLevelCache` method to `IServiceCollection` and also add `UseEFSecondLevelCache` method to `IApplicationBuilder` before using this method.
            </summary>
            <typeparam name="TType">Entity type.</typeparam>
            <param name="query">The input EF query.</param>
            <param name="saltKey">If you think the computed hash of the query is not enough, set this value.</param>
            <returns>Provides functionality to evaluate queries against a specific data source.</returns>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFCachedQueryProvider`1">
            <summary>
            Defines methods to create and execute queries that are described by an System.Linq.IQueryable object.
            </summary>
            <typeparam name="TType">Type of the entity.</typeparam>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryProvider`1.#ctor(System.Linq.IQueryable{`0},System.String,EFSecondLevelCache.Core.Contracts.EFCacheDebugInfo,EFSecondLevelCache.Core.Contracts.IEFCacheKeyProvider,EFSecondLevelCache.Core.Contracts.IEFCacheServiceProvider)">
            <summary>
            Defines methods to create and execute queries that are described by an System.Linq.IQueryable object.
            </summary>
            <param name="query">The input EF query.</param>
            <param name="saltKey">If you think the computed hash of the query is not enough, set this value.</param>
            <param name="debugInfo">Stores the debug information of the caching process.</param>
            <param name="cacheKeyProvider">Gets an EF query and returns its hash to store in the cache.</param>
            <param name="cacheServiceProvider">The Cache Service Provider.</param>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryProvider`1.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an System.Linq.IQueryable of T object that can evaluate the query represented by a specified expression tree.
            </summary>
            <typeparam name="TElement">The type of the elements that is returned.</typeparam>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>An System.Linq.IQueryable of T that can evaluate the query represented by the specified expression tree.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryProvider`1.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an System.Linq.IQueryable object that can evaluate the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>An System.Linq.IQueryable that can evaluate the query represented by the specified expression tree.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>The value that results from executing the specified query.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryProvider`1.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the strongly-typed query represented by a specified expression tree.
            </summary>
            <typeparam name="TResult">The type of the value that results from executing the query.</typeparam>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>The value that results from executing the specified query.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryProvider`1.ExecuteAsync``1(System.Linq.Expressions.Expression)">
            <summary>
            This API supports the Entity Framework Core infrastructure
            </summary>
            <typeparam name="TResult">The type of the value that results from executing the query.</typeparam>
            <param name="expression">An expression tree that represents a LINQ query.</param>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryProvider`1.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the value that results from executing the specified query.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryProvider`1.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the strongly-typed query represented by a specified expression tree.
            </summary>
            <typeparam name="TResult">The type of the value that results from executing the query.</typeparam>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the value that results from executing the specified query.</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCachedQueryProvider`1.Materialize(System.Linq.Expressions.Expression,System.Func{System.Object})">
            <summary>
            Executes the query represented by a specified expression tree to cache its results.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <param name="materializer">How to run the query.</param>
            <returns>The value that results from executing the specified query.</returns>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFCacheKeyHashProvider">
            <summary>
            Computes the unique hash of the input, using the xxHash algorithm.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCacheKeyHashProvider.ComputeHash(System.String)">
            <summary>
            Computes the unique hash of the input.
            </summary>
            <param name="data">the input data to hash</param>
            <returns>Hashed data using the xxHash algorithm</returns>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFCacheKeyProvider">
            <summary>
            A custom cache key provider for EF queries.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCacheKeyProvider.#ctor(EFSecondLevelCache.Core.Contracts.IEFCacheKeyHashProvider)">
            <summary>
            A custom cache key provider for EF queries.
            </summary>
            <param name="cacheKeyHashProvider">Provides the custom hashing algorithm.</param>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCacheKeyProvider.GetEFCacheKey``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression,System.String)">
            <summary>
            Gets an EF query and returns its hashed key to store in the cache.
            </summary>
            <typeparam name="T">Type of the entity</typeparam>
            <param name="query">The EF query.</param>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <param name="saltKey">If you think the computed hash of the query is not enough, set this value.</param>
            <returns>Information of the computed key of the input LINQ query.</returns>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFCacheServiceProvider">
            <summary>
            Using ICacheManager as a cache service.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCacheServiceProvider.#ctor(CacheManager.Core.ICacheManager{System.Object},CacheManager.Core.ICacheManager{System.Collections.Generic.ISet{System.String}})">
            <summary>
            Using ICacheManager as a cache service.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCacheServiceProvider.ClearAllCachedEntries">
            <summary>
            Removes the cached entries added by this library.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCacheServiceProvider.GetValue(System.String)">
            <summary>
            Gets a cached entry by key.
            </summary>
            <param name="cacheKey">key to find</param>
            <returns>cached value</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCacheServiceProvider.InsertValue(System.String,System.Object,System.Collections.Generic.ISet{System.String})">
            <summary>
            Adds a new item to the cache.
            </summary>
            <param name="cacheKey">key</param>
            <param name="value">value</param>
            <param name="rootCacheKeys">cache dependencies</param>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFCacheServiceProvider.InvalidateCacheDependencies(System.String[])">
            <summary>
            Invalidates all of the cache entries which are dependent on any of the specified root keys.
            </summary>
            <param name="rootCacheKeys">cache dependencies</param>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFChangeTrackerExtensions">
            <summary>
            Change Tracker Extensions
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFChangeTrackerExtensions.GetBaseTypes(System.Type)">
            <summary>
            Find the base types of the given type, recursively.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFChangeTrackerExtensions.GetChangedEntityNames(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Using the ChangeTracker to find names of the changed entities.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFChangeTrackerExtensions.GetChangedEntityTypes(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Using the ChangeTracker to find types of the changed entities.
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFChangeTrackerExtensions.MarkAsNoTracking``1(System.Linq.IQueryable{``0})">
            <summary>
            Applies the AsNoTracking method dynamically
            </summary>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFQueryCompilerExtensions">
            <summary>
            Getting the SQL for a Query
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryCompilerExtensions.ToSql``1(System.Linq.IQueryable{``0})">
            <summary>
            Getting the SQL for a Query
            </summary>
            <param name="query">The query</param>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFQueryExpressionVisitor">
            <summary>
            Ref. https://github.com/dotnet/corefx/ -> src/System.Linq.Expressions/src/System/Linq/Expressions/DebugViewWriter.cs
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.GetDebugView(System.Linq.Expressions.Expression)">
            <summary>
            Write out the given AST
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
             <summary>
            
             </summary>
             <param name="assignment"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
             <summary>
            
             </summary>
             <param name="binding"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
             <summary>
            
             </summary>
             <param name="binding"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
             <summary>
            
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFQueryExpressionVisitor.containsWhiteSpace(System.String)">
            <summary>
            Return true if the input string contains any whitespace character.
            Otherwise false.
            </summary>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFServiceCollectionExtensions">
            <summary>
            ServiceCollection Extensions
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.EFServiceCollectionExtensions.AddEFSecondLevelCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers the required services of the EFSecondLevelCache.Core.
            </summary>
        </member>
        <member name="T:EFSecondLevelCache.Core.EFServiceProvider">
            <summary>
            Application's IServiceProvider.
            </summary>
        </member>
        <member name="P:EFSecondLevelCache.Core.EFServiceProvider.ApplicationServices">
            <summary>
            Access point of the application's IServiceProvider.
            </summary>
        </member>
        <member name="T:EFSecondLevelCache.Core.XxHashUnsafe">
            <summary>
            xxHash is an extremely fast non-cryptographic Hash algorithm, working at speeds close to RAM limits.
            http://code.google.com/p/xxhash/
            </summary>
        </member>
        <member name="M:EFSecondLevelCache.Core.XxHashUnsafe.ComputeHash(System.String)">
            <summary>
            Computes the xxHash of the input string. xxHash is an extremely fast non-cryptographic Hash algorithm.
            </summary>
            <param name="data">the input string</param>
            <returns>xxHash</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.XxHashUnsafe.ComputeHash(System.Byte[])">
            <summary>
            Computes the xxHash of the input byte array. xxHash is an extremely fast non-cryptographic Hash algorithm.
            </summary>
            <param name="data">the input byte array</param>
            <returns>xxHash</returns>
        </member>
        <member name="M:EFSecondLevelCache.Core.XxHashUnsafe.ComputeHash(System.Byte[],System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Computes the xxHash of the input byte array. xxHash is an extremely fast non-cryptographic Hash algorithm.
            </summary>
            <param name="data">the input byte array</param>
            <param name="offset">start offset</param>
            <param name="len">length</param>
            <param name="seed">initial seed</param>
            <returns>xxHash</returns>
        </member>
    </members>
</doc>
