// <auto-generated />
using BO;
using DA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace DA.Migrations
{
    [DbContext(typeof(WWWingsContext))]
    [Migration("20171223071115_v7")]
    partial class v7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BO.AircraftType", b =>
                {
                    b.Property<byte>("TypeID")
                        .IsConcurrencyToken();

                    b.Property<string>("Manufacturer")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .IsConcurrencyToken();

                    b.HasKey("TypeID");

                    b.ToTable("AircraftType");
                });

            modelBuilder.Entity("BO.AircraftTypeDetail", b =>
                {
                    b.Property<byte>("AircraftTypeID")
                        .IsConcurrencyToken();

                    b.Property<float?>("Length")
                        .IsConcurrencyToken();

                    b.Property<string>("Memo")
                        .IsConcurrencyToken();

                    b.Property<short?>("Tare")
                        .IsConcurrencyToken();

                    b.Property<byte?>("TurbineCount")
                        .IsConcurrencyToken();

                    b.HasKey("AircraftTypeID");

                    b.ToTable("AircraftTypeDetail");
                });

            modelBuilder.Entity("BO.Airline", b =>
                {
                    b.Property<string>("Code")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .HasMaxLength(100);

                    b.HasKey("Code");

                    b.ToTable("Airline");
                });

            modelBuilder.Entity("BO.Booking", b =>
                {
                    b.Property<int>("FlightNo")
                        .IsConcurrencyToken();

                    b.Property<int>("PassengerID")
                        .IsConcurrencyToken();

                    b.HasKey("FlightNo", "PassengerID");

                    b.HasIndex("PassengerID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("BO.Employee", b =>
                {
                    b.Property<int>("PersonID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Birthday")
                        .IsConcurrencyToken();

                    b.Property<int?>("DetailID")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsConcurrencyToken()
                        .IsRequired();

                    b.Property<string>("EMail")
                        .IsConcurrencyToken();

                    b.Property<string>("GivenName")
                        .IsConcurrencyToken();

                    b.Property<string>("PassportNumber")
                        .IsConcurrencyToken()
                        .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                    b.Property<float>("Salary")
                        .IsConcurrencyToken();

                    b.Property<int?>("SupervisorPersonID")
                        .IsConcurrencyToken();

                    b.Property<string>("Surname")
                        .IsConcurrencyToken();

                    b.HasKey("PersonID");

                    b.HasIndex("DetailID");

                    b.HasIndex("SupervisorPersonID");

                    b.ToTable("Employee");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Employee");
                });

            modelBuilder.Entity("BO.Flight", b =>
                {
                    b.Property<int>("FlightNo")
                        .IsConcurrencyToken();

                    b.Property<byte?>("AircraftTypeID")
                        .IsConcurrencyToken();

                    b.Property<string>("AirlineCode")
                        .IsConcurrencyToken();

                    b.Property<int?>("CopilotId")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FlightDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Departure")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("(offen)")
                        .HasMaxLength(50);

                    b.Property<string>("Destination")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("(offen)")
                        .HasMaxLength(50);

                    b.Property<short?>("FreeSeats")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken();

                    b.Property<string>("Memo")
                        .IsConcurrencyToken()
                        .HasMaxLength(5000);

                    b.Property<bool?>("NonSmokingFlight")
                        .IsConcurrencyToken();

                    b.Property<int>("PilotId")
                        .IsConcurrencyToken();

                    b.Property<decimal?>("Price")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(123.45m);

                    b.Property<short?>("Seats")
                        .IsConcurrencyToken()
                        .IsRequired();

                    b.Property<bool?>("Strikebound")
                        .IsConcurrencyToken();

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal?>("Utilization")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("100.0-(([FreeSeats]*1.0)/[Seats])*100.0");

                    b.HasKey("FlightNo");

                    b.HasIndex("AircraftTypeID");

                    b.HasIndex("AirlineCode");

                    b.HasIndex("CopilotId");

                    b.HasIndex("FreeSeats")
                        .HasName("Index_FreeSeats");

                    b.HasIndex("PilotId");

                    b.HasIndex("Departure", "Destination");

                    b.ToTable("Flight");
                });

            modelBuilder.Entity("BO.Passenger", b =>
                {
                    b.Property<int>("PersonID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Birthday")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("CustomerSince")
                        .IsConcurrencyToken();

                    b.Property<int?>("DetailID")
                        .IsConcurrencyToken();

                    b.Property<string>("EMail")
                        .IsConcurrencyToken();

                    b.Property<string>("GivenName")
                        .IsConcurrencyToken();

                    b.Property<string>("Status")
                        .IsConcurrencyToken()
                        .HasMaxLength(1);

                    b.Property<string>("Surname")
                        .IsConcurrencyToken();

                    b.HasKey("PersonID");

                    b.HasIndex("DetailID");

                    b.ToTable("Passenger");
                });

            modelBuilder.Entity("BO.Persondetail", b =>
                {
                    b.Property<int>("ID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsConcurrencyToken()
                        .HasMaxLength(30);

                    b.Property<string>("Country")
                        .IsConcurrencyToken()
                        .HasMaxLength(3);

                    b.Property<string>("Memo")
                        .IsConcurrencyToken();

                    b.Property<byte[]>("Photo")
                        .IsConcurrencyToken();

                    b.Property<string>("Postcode")
                        .IsConcurrencyToken()
                        .HasMaxLength(8);

                    b.Property<string>("Street")
                        .IsConcurrencyToken()
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Persondetail");
                });

            modelBuilder.Entity("BO.Pilot", b =>
                {
                    b.HasBaseType("BO.Employee");

                    b.Property<int?>("FlightHours")
                        .IsConcurrencyToken();

                    b.Property<string>("FlightSchool")
                        .IsConcurrencyToken()
                        .HasMaxLength(50);

                    b.Property<DateTime>("LicenseDate")
                        .IsConcurrencyToken();

                    b.Property<int>("PilotLicenseType")
                        .IsConcurrencyToken();

                    b.ToTable("Pilot");

                    b.HasDiscriminator().HasValue("Pilot");
                });

            modelBuilder.Entity("BO.AircraftTypeDetail", b =>
                {
                    b.HasOne("BO.AircraftType", "AircraftType")
                        .WithOne("Detail")
                        .HasForeignKey("BO.AircraftTypeDetail", "AircraftTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BO.Booking", b =>
                {
                    b.HasOne("BO.Flight", "Flight")
                        .WithMany("BookingSet")
                        .HasForeignKey("FlightNo")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BO.Passenger", "Passenger")
                        .WithMany("BookingSet")
                        .HasForeignKey("PassengerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BO.Employee", b =>
                {
                    b.HasOne("BO.Persondetail", "Detail")
                        .WithMany()
                        .HasForeignKey("DetailID");

                    b.HasOne("BO.Employee", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorPersonID");
                });

            modelBuilder.Entity("BO.Flight", b =>
                {
                    b.HasOne("BO.AircraftType", "AircraftType")
                        .WithMany("FlightSet")
                        .HasForeignKey("AircraftTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BO.Airline", "Airline")
                        .WithMany("FlightSet")
                        .HasForeignKey("AirlineCode");

                    b.HasOne("BO.Pilot", "Copilot")
                        .WithMany("FlightAsCopilotSet")
                        .HasForeignKey("CopilotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BO.Pilot", "Pilot")
                        .WithMany("FlightAsPilotSet")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BO.Passenger", b =>
                {
                    b.HasOne("BO.Persondetail", "Detail")
                        .WithMany()
                        .HasForeignKey("DetailID");
                });
#pragma warning restore 612, 618
        }
    }
}
